// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// external module LZC

module BarrelShifter(	// src/main/scala/pvu/BarrelShift.scala:13:7
  input  [30:0] io_operand_i,	// src/main/scala/pvu/BarrelShift.scala:14:14
  input  [4:0]  io_shift_amount,	// src/main/scala/pvu/BarrelShift.scala:14:14
  output [30:0] io_result_o	// src/main/scala/pvu/BarrelShift.scala:14:14
);

  wire [30:0] _temp_results_3_T_2 =
    io_shift_amount[4] ? {io_operand_i[14:0], 16'h0} : io_operand_i;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  wire [30:0] _temp_results_2_T_2 =
    io_shift_amount[3] ? {_temp_results_3_T_2[22:0], 8'h0} : _temp_results_3_T_2;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  wire [30:0] _temp_results_1_T_2 =
    io_shift_amount[2] ? {_temp_results_2_T_2[26:0], 4'h0} : _temp_results_2_T_2;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  wire [30:0] _temp_results_0_T_2 =
    io_shift_amount[1] ? {_temp_results_1_T_2[28:0], 2'h0} : _temp_results_1_T_2;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  assign io_result_o =
    io_shift_amount[0] ? {_temp_results_0_T_2[29:0], 1'h0} : _temp_results_0_T_2;	// src/main/scala/pvu/BarrelShift.scala:13:7, :32:33, :42:{23,39,60}
endmodule

module PositDecode(	// src/main/scala/pvu/PositDecode.scala:7:7
  input  [0:0][31:0] io_posit,	// src/main/scala/pvu/PositDecode.scala:13:14
  output [0:0]       io_Sign,	// src/main/scala/pvu/PositDecode.scala:13:14
  output [0:0][7:0]  io_Exp,	// src/main/scala/pvu/PositDecode.scala:13:14
  output [0:0][27:0] io_Frac	// src/main/scala/pvu/PositDecode.scala:13:14
);

  wire [30:0] _barrel_shifter_io_result_o;	// src/main/scala/pvu/PositDecode.scala:64:32
  wire [4:0]  _lzcModule_cnt_o;	// src/main/scala/pvu/PositDecode.scala:41:27
  wire [30:0] _operand_0_T_6 =
    io_posit[1'h0][31] ? ~(io_posit[1'h0][30:0]) + 31'h1 : io_posit[1'h0][30:0];	// src/main/scala/pvu/PositDecode.scala:24:30, :25:{22,44,56,77}, :55:46
  LZC #(
    .MODE(1),
    .WIDTH(31)
  ) lzcModule (	// src/main/scala/pvu/PositDecode.scala:41:27
    .in_i    ({31{_operand_0_T_6[30]}} ^ _operand_0_T_6),	// src/main/scala/pvu/PositDecode.scala:25:22, :35:33, :36:26
    .cnt_o   (_lzcModule_cnt_o),
    .empty_o (/* unused */)
  );
  BarrelShifter barrel_shifter (	// src/main/scala/pvu/PositDecode.scala:64:32
    .io_operand_i    (_operand_0_T_6),	// src/main/scala/pvu/PositDecode.scala:25:22
    .io_shift_amount (_lzcModule_cnt_o + 5'h1),	// src/main/scala/pvu/PositDecode.scala:41:27, :55:67, :66:54
    .io_result_o     (_barrel_shifter_io_result_o)
  );
  assign io_Sign = {1{io_posit[1'h0][31]}};	// src/main/scala/pvu/PositDecode.scala:7:7, :24:{16,30}, :55:46
  assign io_Exp =
    {1{{_operand_0_T_6[30]
          ? {1'h0, _lzcModule_cnt_o - 5'h1}
          : {1'h1, ~_lzcModule_cnt_o + 5'h1},
        _barrel_shifter_io_result_o[30:29]}}};	// src/main/scala/pvu/PositDecode.scala:7:7, :25:{22,34}, :35:33, :41:27, :55:{27,46,67,78,84,100}, :64:32, :73:73, :74:23
  assign io_Frac = {1{{|_operand_0_T_6, _barrel_shifter_io_result_o[28:2]}}};	// src/main/scala/pvu/PositDecode.scala:7:7, :25:22, :64:32, :82:56, :83:{22,63}
endmodule

module FractionAlignment_AddSub(	// src/main/scala/pvu/FractionAlignment_AddSub.scala:7:7
  input  [0:0][27:0] io_pir_frac1_i,	// src/main/scala/pvu/FractionAlignment_AddSub.scala:14:14
                     io_pir_frac2_i,	// src/main/scala/pvu/FractionAlignment_AddSub.scala:14:14
  input  [0:0][7:0]  io_pir_exp1_i,	// src/main/scala/pvu/FractionAlignment_AddSub.scala:14:14
                     io_pir_exp2_i,	// src/main/scala/pvu/FractionAlignment_AddSub.scala:14:14
  output [0:0][29:0] io_pir_frac1_align,	// src/main/scala/pvu/FractionAlignment_AddSub.scala:14:14
                     io_pir_frac2_align,	// src/main/scala/pvu/FractionAlignment_AddSub.scala:14:14
  output [0:0][7:0]  io_pir_max_exp	// src/main/scala/pvu/FractionAlignment_AddSub.scala:14:14
);

  wire [7:0]  _io_pir_max_exp_0_T_1 =
    $signed(io_pir_exp1_i[1'h0]) > $signed(io_pir_exp2_i[1'h0])
      ? io_pir_exp1_i[1'h0]
      : io_pir_exp2_i[1'h0];	// src/main/scala/pvu/FractionAlignment_AddSub.scala:27:{29,47}, :38:45
  wire [29:0] _frac1_shifted_0_T = {io_pir_frac1_i[1'h0], 2'h0};	// src/main/scala/pvu/FractionAlignment_AddSub.scala:37:45, :38:45
  wire [29:0] _frac2_shifted_0_T = {io_pir_frac2_i[1'h0], 2'h0};	// src/main/scala/pvu/FractionAlignment_AddSub.scala:37:45, :38:45
  wire [7:0]  _shift_amount1_T = _io_pir_max_exp_0_T_1 - io_pir_exp1_i[1'h0];	// src/main/scala/pvu/FractionAlignment_AddSub.scala:27:{29,47}, :38:45, :50:44
  wire [7:0]  _shift_amount2_T = _io_pir_max_exp_0_T_1 - io_pir_exp2_i[1'h0];	// src/main/scala/pvu/FractionAlignment_AddSub.scala:27:{29,47}, :38:45, :51:44
  wire        _GEN = ~(|_shift_amount1_T) & (|_shift_amount2_T);	// src/main/scala/pvu/FractionAlignment_AddSub.scala:50:44, :51:44, :55:{24,32,49}
  wire [29:0] _GEN_0 = {2'h0, io_pir_frac1_i[1'h0]};	// src/main/scala/pvu/FractionAlignment_AddSub.scala:37:45, :38:45, :56:29
  wire        _GEN_1 = ~(|_shift_amount2_T) & (|_shift_amount1_T);	// src/main/scala/pvu/FractionAlignment_AddSub.scala:50:44, :51:44, :55:{24,49}, :58:{30,38}
  wire        _GEN_2 = ~(|_shift_amount1_T) & ~(|_shift_amount2_T);	// src/main/scala/pvu/FractionAlignment_AddSub.scala:50:44, :51:44, :55:{24,49}, :58:30, :61:38
  assign io_pir_frac1_align =
    {1{_GEN
         ? _GEN_0
         : _GEN_1
             ? _frac1_shifted_0_T
               >> (_shift_amount1_T + 8'h2 > 8'h1E ? 8'h1E : _shift_amount1_T + 8'h2)
             : _GEN_2
                 ? _GEN_0
                 : _frac1_shifted_0_T
                   >> (_shift_amount1_T + 8'h2 > 8'h1E
                         ? 8'h1E
                         : _shift_amount1_T + 8'h2)}};	// src/main/scala/pvu/FractionAlignment_AddSub.scala:7:7, :37:45, :50:44, :55:{32,57}, :56:29, :57:{55,86}, :58:{38,63}, :60:{29,49,55,86,100,162}, :61:{38,63}, :62:29, :66:{27,47,53,84,98,160}
  assign io_pir_frac2_align =
    {1{_GEN
         ? _frac2_shifted_0_T
           >> (_shift_amount2_T + 8'h2 > 8'h1E ? 8'h1E : _shift_amount2_T + 8'h2)
         : _GEN_1 | _GEN_2
             ? {2'h0, io_pir_frac2_i[1'h0]}
             : _frac2_shifted_0_T
               >> (_shift_amount2_T + 8'h2 > 8'h1E ? 8'h1E : _shift_amount2_T + 8'h2)}};	// src/main/scala/pvu/FractionAlignment_AddSub.scala:7:7, :37:45, :38:45, :51:44, :55:{32,57}, :57:{29,49,55,86,101,163}, :58:{38,63}, :59:29, :61:{38,63}, :67:{47,53,84,98,160}
  assign io_pir_max_exp = {1{_io_pir_max_exp_0_T_1}};	// src/main/scala/pvu/FractionAlignment_AddSub.scala:7:7, :27:{23,29}
endmodule

module Add(	// src/main/scala/pvu/Add.scala:7:7
  input  [0:0]       io_pir_sign1_i,	// src/main/scala/pvu/Add.scala:13:14
                     io_pir_sign2_i,	// src/main/scala/pvu/Add.scala:13:14
  input  [0:0][7:0]  io_pir_exp1_i,	// src/main/scala/pvu/Add.scala:13:14
                     io_pir_exp2_i,	// src/main/scala/pvu/Add.scala:13:14
  input  [0:0][29:0] io_pir_frac1_aligned,	// src/main/scala/pvu/Add.scala:13:14
                     io_pir_frac2_aligned,	// src/main/scala/pvu/Add.scala:13:14
  output [0:0]       io_pir_sign_o,	// src/main/scala/pvu/Add.scala:13:14
  output [0:0][7:0]  io_pir_exp_o,	// src/main/scala/pvu/Add.scala:13:14
  output [0:0][29:0] io_pir_frac_o,	// src/main/scala/pvu/Add.scala:13:14
  output [0:0]       io_overflow,	// src/main/scala/pvu/Add.scala:13:14
                     io_frac_truncate	// src/main/scala/pvu/Add.scala:13:14
);

  wire        _GEN = io_pir_sign1_i[1'h0] == io_pir_sign2_i[1'h0];	// src/main/scala/pvu/Add.scala:31:{24,43}
  wire [30:0] sum =
    {1'h0, io_pir_frac1_aligned[1'h0]} + {1'h0, io_pir_frac2_aligned[1'h0]};	// src/main/scala/pvu/Add.scala:31:24, :38:41
  wire        mant1_greater = io_pir_frac1_aligned[1'h0] > io_pir_frac2_aligned[1'h0];	// src/main/scala/pvu/Add.scala:31:24, :38:41, :59:32
  assign io_pir_sign_o =
    {1{_GEN | mant1_greater ? io_pir_sign1_i[1'h0] : io_pir_sign2_i[1'h0]}};	// src/main/scala/pvu/Add.scala:7:7, :31:{24,43}, :36:31, :46:22, :59:32, :66:23, :67:22
  assign io_pir_exp_o =
    {1{_GEN & sum[30] ? io_pir_exp1_i[1'h0] + 8'h1 : io_pir_exp1_i[1'h0]}};	// src/main/scala/pvu/Add.scala:7:7, :31:{24,43}, :36:31, :38:41, :39:20, :43:{23,48}, :47:22, :70:25
  assign io_pir_frac_o =
    {1{_GEN
         ? (sum[30] ? sum[30:1] : sum[29:0])
         : mant1_greater
             ? io_pir_frac1_aligned[1'h0] - io_pir_frac2_aligned[1'h0]
             : io_pir_frac2_aligned[1'h0] - io_pir_frac1_aligned[1'h0]}};	// src/main/scala/pvu/Add.scala:7:7, :31:{24,43}, :36:31, :38:41, :39:20, :42:{23,35,44}, :48:22, :59:32, :62:{24,46,61}, :63:22
  assign io_overflow = {1{_GEN & sum[30]}};	// src/main/scala/pvu/Add.scala:7:7, :31:43, :36:31, :38:41, :39:20, :51:20, :71:25
  assign io_frac_truncate = {1{_GEN & sum[30] & (|(sum[29:0]))}};	// src/main/scala/pvu/Add.scala:7:7, :31:43, :36:31, :38:41, :39:20, :42:44, :54:{25,69}, :72:25
endmodule

module Sub(	// src/main/scala/pvu/Sub.scala:7:7
  input  [0:0]       io_pir_sign1_i,	// src/main/scala/pvu/Sub.scala:14:14
                     io_pir_sign2_i,	// src/main/scala/pvu/Sub.scala:14:14
  input  [0:0][7:0]  io_pir_exp1_i,	// src/main/scala/pvu/Sub.scala:14:14
                     io_pir_exp2_i,	// src/main/scala/pvu/Sub.scala:14:14
  input  [0:0][29:0] io_pir_frac1_aligned,	// src/main/scala/pvu/Sub.scala:14:14
                     io_pir_frac2_aligned,	// src/main/scala/pvu/Sub.scala:14:14
  output [0:0]       io_pir_sign_o,	// src/main/scala/pvu/Sub.scala:14:14
  output [0:0][7:0]  io_pir_exp_o,	// src/main/scala/pvu/Sub.scala:14:14
  output [0:0][29:0] io_pir_frac_o,	// src/main/scala/pvu/Sub.scala:14:14
  output [0:0]       io_overflow,	// src/main/scala/pvu/Sub.scala:14:14
                     io_frac_truncate	// src/main/scala/pvu/Sub.scala:14:14
);

  wire        _GEN = io_pir_sign1_i[1'h0] == io_pir_sign2_i[1'h0];	// src/main/scala/pvu/Sub.scala:32:{24,43}
  wire        mant1_greater = io_pir_frac1_aligned[1'h0] > io_pir_frac2_aligned[1'h0];	// src/main/scala/pvu/Sub.scala:32:24, :41:34
  wire [30:0] sum =
    {1'h0, io_pir_frac1_aligned[1'h0]} + {1'h0, io_pir_frac2_aligned[1'h0]};	// src/main/scala/pvu/Sub.scala:32:24, :41:34, :44:52, :59:46
  assign io_pir_sign_o = {1{_GEN & ~mant1_greater ^ io_pir_sign1_i[1'h0]}};	// src/main/scala/pvu/Sub.scala:7:7, :32:{24,43}, :37:31, :41:34, :47:38, :48:26, :50:26, :65:24
  assign io_pir_exp_o =
    {1{_GEN | ~(sum[30]) ? io_pir_exp1_i[1'h0] : io_pir_exp1_i[1'h0] + 8'h1}};	// src/main/scala/pvu/Sub.scala:7:7, :32:{24,43}, :37:31, :54:27, :59:46, :60:25, :62:50, :66:24
  assign io_pir_frac_o =
    {1{_GEN
         ? (mant1_greater
              ? io_pir_frac1_aligned[1'h0] - io_pir_frac2_aligned[1'h0]
              : io_pir_frac2_aligned[1'h0] - io_pir_frac1_aligned[1'h0])
         : sum[30] ? sum[30:1] : sum[29:0]}};	// src/main/scala/pvu/Sub.scala:7:7, :32:{24,43}, :37:31, :41:34, :44:{24,30,52,67}, :59:46, :60:25, :61:{25,37,46}, :67:24
  assign io_overflow = {1{~_GEN & sum[30]}};	// src/main/scala/pvu/Sub.scala:7:7, :32:43, :37:31, :55:27, :59:46, :60:25, :70:23
  assign io_frac_truncate = {1{~_GEN & sum[30] & (|(sum[29:0]))}};	// src/main/scala/pvu/Sub.scala:7:7, :32:43, :37:31, :55:27, :56:27, :59:46, :60:25, :61:46, :70:23, :71:{27,62}
endmodule

module BoothEncoder(	// src/main/scala/pvu/BoothEncoder.scala:30:7
  input  [2:0] io_code,	// src/main/scala/pvu/BoothEncoder.scala:31:14
  output       io_neg,	// src/main/scala/pvu/BoothEncoder.scala:31:14
               io_zero,	// src/main/scala/pvu/BoothEncoder.scala:31:14
               io_one,	// src/main/scala/pvu/BoothEncoder.scala:31:14
               io_two	// src/main/scala/pvu/BoothEncoder.scala:31:14
);

  wire _GEN = io_code == 3'h0;	// src/main/scala/pvu/BoothEncoder.scala:45:20
  wire _GEN_0 = io_code == 3'h1;	// src/main/scala/pvu/BoothEncoder.scala:45:20
  wire _GEN_1 = io_code == 3'h2;	// src/main/scala/pvu/BoothEncoder.scala:45:20
  wire _GEN_2 = io_code == 3'h3;	// src/main/scala/pvu/BoothEncoder.scala:45:20
  wire _GEN_3 = io_code == 3'h4;	// src/main/scala/pvu/BoothEncoder.scala:45:20
  wire _GEN_4 = _GEN_0 | _GEN_1;	// src/main/scala/pvu/BoothEncoder.scala:43:11, :45:20
  wire _GEN_5 = io_code == 3'h5;	// src/main/scala/pvu/BoothEncoder.scala:45:20
  wire _GEN_6 = io_code == 3'h6;	// src/main/scala/pvu/BoothEncoder.scala:45:20
  assign io_neg = ~(_GEN | _GEN_0 | _GEN_1 | _GEN_2) & (_GEN_3 | _GEN_5 | _GEN_6);	// src/main/scala/pvu/BoothEncoder.scala:30:7, :40:11, :45:20, :59:15, :63:15
  assign io_zero =
    _GEN | ~(_GEN_0 | _GEN_1 | _GEN_2 | _GEN_3 | _GEN_5 | _GEN_6) & (&io_code);	// src/main/scala/pvu/BoothEncoder.scala:30:7, :41:11, :45:20, :47:15
  assign io_one = ~_GEN & (_GEN_4 | ~(_GEN_2 | _GEN_3) & (_GEN_5 | _GEN_6));	// src/main/scala/pvu/BoothEncoder.scala:30:7, :42:11, :43:11, :45:20, :50:15, :53:15, :64:15
  assign io_two = ~(_GEN | _GEN_4) & (_GEN_2 | _GEN_3);	// src/main/scala/pvu/BoothEncoder.scala:30:7, :43:11, :45:20, :56:15
endmodule

module GenProduct(	// src/main/scala/pvu/GenProduct.scala:17:7
  input  [29:0] io_multiplicand,	// src/main/scala/pvu/GenProduct.scala:18:14
  input  [2:0]  io_code,	// src/main/scala/pvu/GenProduct.scala:18:14
  output [30:0] io_partial_prod,	// src/main/scala/pvu/GenProduct.scala:18:14
  output        io_sign	// src/main/scala/pvu/GenProduct.scala:18:14
);

  wire _boothEncoder_io_neg;	// src/main/scala/pvu/GenProduct.scala:27:28
  wire _boothEncoder_io_one;	// src/main/scala/pvu/GenProduct.scala:27:28
  wire _boothEncoder_io_two;	// src/main/scala/pvu/GenProduct.scala:27:28
  BoothEncoder boothEncoder (	// src/main/scala/pvu/GenProduct.scala:27:28
    .io_code (io_code),
    .io_neg  (_boothEncoder_io_neg),
    .io_zero (/* unused */),
    .io_one  (_boothEncoder_io_one),
    .io_two  (_boothEncoder_io_two)
  );
  assign io_partial_prod =
    {31{_boothEncoder_io_neg}}
    ^ (_boothEncoder_io_one
         ? {1'h0, io_multiplicand}
         : _boothEncoder_io_two ? {io_multiplicand, 1'h0} : 31'h0);	// src/main/scala/pvu/GenProduct.scala:17:7, :27:28, :34:30, :35:14, :36:37, :37:{14,33}, :39:14, :43:25
  assign io_sign = _boothEncoder_io_neg;	// src/main/scala/pvu/GenProduct.scala:17:7, :27:28
endmodule

module GenProds(	// src/main/scala/pvu/GenProds.scala:23:7
  input               clock,	// src/main/scala/pvu/GenProds.scala:23:7
                      reset,	// src/main/scala/pvu/GenProds.scala:23:7
  input  [29:0]       io_operand_a,	// src/main/scala/pvu/GenProds.scala:27:14
                      io_operand_b,	// src/main/scala/pvu/GenProds.scala:27:14
  output [14:0][59:0] io_partial_prods	// src/main/scala/pvu/GenProds.scala:27:14
);

  wire [30:0] _genProdLast_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:90:27
  wire [30:0] _genProd_12_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire        _genProd_12_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [30:0] _genProd_11_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire        _genProd_11_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [30:0] _genProd_10_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire        _genProd_10_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [30:0] _genProd_9_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire        _genProd_9_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [30:0] _genProd_8_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire        _genProd_8_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [30:0] _genProd_7_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire        _genProd_7_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [30:0] _genProd_6_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire        _genProd_6_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [30:0] _genProd_5_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire        _genProd_5_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [30:0] _genProd_4_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire        _genProd_4_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [30:0] _genProd_3_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire        _genProd_3_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [30:0] _genProd_2_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire        _genProd_2_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [30:0] _genProd_1_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire        _genProd_1_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [30:0] _genProd_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire        _genProd_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [30:0] _genProdFirst_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:48:28
  wire        _genProdFirst_io_sign;	// src/main/scala/pvu/GenProds.scala:48:28
  wire [59:0] _io_partial_prods_0_T_1 =
    {26'h0,
     ~_genProdFirst_io_sign,
     {2{_genProdFirst_io_sign}},
     _genProdFirst_io_partial_prod};	// src/main/scala/pvu/GenProds.scala:48:28, :55:{29,66}
  `ifndef SYNTHESIS	// src/main/scala/pvu/GenProds.scala:38:9
    always @(posedge clock) begin	// src/main/scala/pvu/GenProds.scala:38:9
      if ((`PRINTF_COND_) & ~reset) begin	// src/main/scala/pvu/GenProds.scala:38:9, :63:11
        $fwrite(32'h80000002, "multiplier = %b\n", {io_operand_b, 1'h0});	// src/main/scala/pvu/GenProds.scala:37:24, :38:9
        $fwrite(32'h80000002, "signs[0] = %b\n", ~_genProdFirst_io_sign);	// src/main/scala/pvu/GenProds.scala:38:9, :48:28, :55:66, :56:9
        $fwrite(32'h80000002, "partial_prods[0] = %x\n", _io_partial_prods_0_T_1);	// src/main/scala/pvu/GenProds.scala:38:9, :55:29, :57:9
        $fwrite(32'h80000002, "codes[%d] = %b\n", 1'h1, io_operand_b[3:1]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 2'h2, io_operand_b[5:3]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 2'h3, io_operand_b[7:5]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 3'h4, io_operand_b[9:7]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 3'h5, io_operand_b[11:9]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 3'h6, io_operand_b[13:11]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 3'h7, io_operand_b[15:13]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'h8, io_operand_b[17:15]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'h9, io_operand_b[19:17]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'hA, io_operand_b[21:19]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'hB, io_operand_b[23:21]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'hC, io_operand_b[25:23]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'hD, io_operand_b[27:25]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  GenProduct genProdFirst (	// src/main/scala/pvu/GenProds.scala:48:28
    .io_multiplicand (io_operand_a),
    .io_code         ({io_operand_b[1:0], 1'h0}),	// src/main/scala/pvu/GenProds.scala:37:24, :45:25
    .io_partial_prod (_genProdFirst_io_partial_prod),
    .io_sign         (_genProdFirst_io_sign)
  );
  GenProduct genProd (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[3:1]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_io_partial_prod),
    .io_sign         (_genProd_io_sign)
  );
  GenProduct genProd_1 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[5:3]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_1_io_partial_prod),
    .io_sign         (_genProd_1_io_sign)
  );
  GenProduct genProd_2 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[7:5]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_2_io_partial_prod),
    .io_sign         (_genProd_2_io_sign)
  );
  GenProduct genProd_3 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[9:7]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_3_io_partial_prod),
    .io_sign         (_genProd_3_io_sign)
  );
  GenProduct genProd_4 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[11:9]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_4_io_partial_prod),
    .io_sign         (_genProd_4_io_sign)
  );
  GenProduct genProd_5 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[13:11]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_5_io_partial_prod),
    .io_sign         (_genProd_5_io_sign)
  );
  GenProduct genProd_6 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[15:13]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_6_io_partial_prod),
    .io_sign         (_genProd_6_io_sign)
  );
  GenProduct genProd_7 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[17:15]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_7_io_partial_prod),
    .io_sign         (_genProd_7_io_sign)
  );
  GenProduct genProd_8 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[19:17]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_8_io_partial_prod),
    .io_sign         (_genProd_8_io_sign)
  );
  GenProduct genProd_9 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[21:19]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_9_io_partial_prod),
    .io_sign         (_genProd_9_io_sign)
  );
  GenProduct genProd_10 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[23:21]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_10_io_partial_prod),
    .io_sign         (_genProd_10_io_sign)
  );
  GenProduct genProd_11 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[25:23]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_11_io_partial_prod),
    .io_sign         (_genProd_11_io_sign)
  );
  GenProduct genProd_12 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[27:25]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_12_io_partial_prod),
    .io_sign         (_genProd_12_io_sign)
  );
  GenProduct genProdLast (	// src/main/scala/pvu/GenProds.scala:90:27
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[29:27]),	// src/main/scala/pvu/GenProds.scala:87:33
    .io_partial_prod (_genProdLast_io_partial_prod),
    .io_sign         (/* unused */)
  );
  assign io_partial_prods =
    {{{1'h0, _genProdLast_io_partial_prod, 1'h0, _genProd_12_io_sign, 26'h0}},
     {{2'h1,
       ~_genProd_12_io_sign,
       _genProd_12_io_partial_prod,
       1'h0,
       _genProd_11_io_sign,
       24'h0}},
     {{4'h1,
       ~_genProd_11_io_sign,
       _genProd_11_io_partial_prod,
       1'h0,
       _genProd_10_io_sign,
       22'h0}},
     {{6'h1,
       ~_genProd_10_io_sign,
       _genProd_10_io_partial_prod,
       1'h0,
       _genProd_9_io_sign,
       20'h0}},
     {{8'h1,
       ~_genProd_9_io_sign,
       _genProd_9_io_partial_prod,
       1'h0,
       _genProd_8_io_sign,
       18'h0}},
     {{10'h1,
       ~_genProd_8_io_sign,
       _genProd_8_io_partial_prod,
       1'h0,
       _genProd_7_io_sign,
       16'h0}},
     {{12'h1,
       ~_genProd_7_io_sign,
       _genProd_7_io_partial_prod,
       1'h0,
       _genProd_6_io_sign,
       14'h0}},
     {{14'h1,
       ~_genProd_6_io_sign,
       _genProd_6_io_partial_prod,
       1'h0,
       _genProd_5_io_sign,
       12'h0}},
     {{16'h1,
       ~_genProd_5_io_sign,
       _genProd_5_io_partial_prod,
       1'h0,
       _genProd_4_io_sign,
       10'h0}},
     {{18'h1,
       ~_genProd_4_io_sign,
       _genProd_4_io_partial_prod,
       1'h0,
       _genProd_3_io_sign,
       8'h0}},
     {{20'h1,
       ~_genProd_3_io_sign,
       _genProd_3_io_partial_prod,
       1'h0,
       _genProd_2_io_sign,
       6'h0}},
     {{22'h1,
       ~_genProd_2_io_sign,
       _genProd_2_io_partial_prod,
       1'h0,
       _genProd_1_io_sign,
       4'h0}},
     {{24'h1,
       ~_genProd_1_io_sign,
       _genProd_1_io_partial_prod,
       1'h0,
       _genProd_io_sign,
       2'h0}},
     {{26'h1, ~_genProd_io_sign, _genProd_io_partial_prod, 1'h0, _genProdFirst_io_sign}},
     {_io_partial_prods_0_T_1}};	// src/main/scala/pvu/GenProds.scala:23:7, :37:24, :48:28, :55:{23,29}, :66:25, :75:27, :78:7, :83:{25,42}, :90:27, :104:31
endmodule

module Compressor3to2(	// src/main/scala/pvu/Compressor3to2.scala:7:7
  input  [2:0][59:0] io_operands_i,	// src/main/scala/pvu/Compressor3to2.scala:8:14
  output [61:0]      io_sum_o,	// src/main/scala/pvu/Compressor3to2.scala:8:14
                     io_carry_o	// src/main/scala/pvu/Compressor3to2.scala:8:14
);

  assign io_sum_o =
    {2'h0, io_operands_i[2'h0] ^ io_operands_i[2'h1] ^ io_operands_i[2'h2]};	// src/main/scala/pvu/Compressor3to2.scala:7:7, :15:36, :20:14
  assign io_carry_o =
    {2'h0,
     io_operands_i[2'h0] & io_operands_i[2'h1] | io_operands_i[2'h1] & io_operands_i[2'h2]
       | io_operands_i[2'h0] & io_operands_i[2'h2]};	// src/main/scala/pvu/Compressor3to2.scala:7:7, :15:36, :16:33, :17:{33,53}, :18:33, :21:14
endmodule

module CsaTree(	// src/main/scala/pvu/CsaTree.scala:7:7
  input  [2:0][59:0] io_operands_i,	// src/main/scala/pvu/CsaTree.scala:10:14
  output [61:0]      io_sum_o,	// src/main/scala/pvu/CsaTree.scala:10:14
                     io_carry_o	// src/main/scala/pvu/CsaTree.scala:10:14
);

  Compressor3to2 compressor (	// src/main/scala/pvu/CsaTree.scala:32:28
    .io_operands_i (io_operands_i),
    .io_sum_o      (io_sum_o),
    .io_carry_o    (io_carry_o)
  );
endmodule

module Compressor4to2(	// src/main/scala/pvu/Compressor4to2.scala:7:7
  input  [3:0][59:0] io_operands_i,	// src/main/scala/pvu/Compressor4to2.scala:8:14
  output [61:0]      io_sum_o,	// src/main/scala/pvu/Compressor4to2.scala:8:14
                     io_carry_o	// src/main/scala/pvu/Compressor4to2.scala:8:14
);

  assign io_sum_o =
    {2'h0,
     io_operands_i[2'h0] ^ io_operands_i[2'h1] ^ io_operands_i[2'h2]
       ^ io_operands_i[2'h3]};	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36, :23:12
  assign io_carry_o =
    {2'h0,
     io_operands_i[2'h0] & io_operands_i[2'h1] | io_operands_i[2'h1] & io_operands_i[2'h2]
       | io_operands_i[2'h2] & io_operands_i[2'h3] | io_operands_i[2'h0]
       & io_operands_i[2'h2] | io_operands_i[2'h0] & io_operands_i[2'h3]
       | io_operands_i[2'h1] & io_operands_i[2'h3]};	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36, :16:33, :17:33, :18:33, :19:33, :20:{33,53}, :21:33, :24:14
endmodule

module CsaTree_1(	// src/main/scala/pvu/CsaTree.scala:7:7
  input  [3:0][59:0] io_operands_i,	// src/main/scala/pvu/CsaTree.scala:10:14
  output [61:0]      io_sum_o,	// src/main/scala/pvu/CsaTree.scala:10:14
                     io_carry_o	// src/main/scala/pvu/CsaTree.scala:10:14
);

  Compressor4to2 compressor (	// src/main/scala/pvu/CsaTree.scala:39:28
    .io_operands_i (io_operands_i),
    .io_sum_o      (io_sum_o),
    .io_carry_o    (io_carry_o)
  );
endmodule

module Compressor4to2_1(	// src/main/scala/pvu/Compressor4to2.scala:7:7
  input  [3:0][62:0] io_operands_i,	// src/main/scala/pvu/Compressor4to2.scala:8:14
  output [62:0]      io_sum_o,	// src/main/scala/pvu/Compressor4to2.scala:8:14
                     io_carry_o	// src/main/scala/pvu/Compressor4to2.scala:8:14
);

  assign io_sum_o =
    io_operands_i[2'h0] ^ io_operands_i[2'h1] ^ io_operands_i[2'h2] ^ io_operands_i[2'h3];	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36
  assign io_carry_o =
    io_operands_i[2'h0] & io_operands_i[2'h1] | io_operands_i[2'h1] & io_operands_i[2'h2]
    | io_operands_i[2'h2] & io_operands_i[2'h3] | io_operands_i[2'h0]
    & io_operands_i[2'h2] | io_operands_i[2'h0] & io_operands_i[2'h3]
    | io_operands_i[2'h1] & io_operands_i[2'h3];	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36, :16:33, :17:33, :18:33, :19:33, :20:{33,53}, :21:33
endmodule

module CsaTree_2(	// src/main/scala/pvu/CsaTree.scala:7:7
  input  [6:0][59:0] io_operands_i,	// src/main/scala/pvu/CsaTree.scala:10:14
  output [62:0]      io_sum_o,	// src/main/scala/pvu/CsaTree.scala:10:14
                     io_carry_o	// src/main/scala/pvu/CsaTree.scala:10:14
);

  wire [61:0] _csa_tree_B_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [61:0] _csa_tree_B_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [61:0] _csa_tree_A_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  wire [61:0] _csa_tree_A_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  CsaTree csa_tree_A (	// src/main/scala/pvu/CsaTree.scala:50:28
    .io_operands_i (io_operands_i[3'h0 +: 3]),	// src/main/scala/pvu/CsaTree.scala:50:28, :51:30
    .io_sum_o      (_csa_tree_A_io_sum_o),
    .io_carry_o    (_csa_tree_A_io_carry_o)
  );
  CsaTree_1 csa_tree_B (	// src/main/scala/pvu/CsaTree.scala:53:28
    .io_operands_i (io_operands_i[3'h3 +: 4]),	// src/main/scala/pvu/CsaTree.scala:53:28, :54:30
    .io_sum_o      (_csa_tree_B_io_sum_o),
    .io_carry_o    (_csa_tree_B_io_carry_o)
  );
  Compressor4to2_1 compressor (	// src/main/scala/pvu/CsaTree.scala:66:28
    .io_operands_i
      ({{{1'h0, _csa_tree_B_io_carry_o}},
        {{1'h0, _csa_tree_B_io_sum_o}},
        {{1'h0, _csa_tree_A_io_carry_o}},
        {{1'h0, _csa_tree_A_io_sum_o}}}),	// src/main/scala/pvu/CsaTree.scala:50:28, :53:28, :57:28, :58:18
    .io_sum_o      (io_sum_o),
    .io_carry_o    (io_carry_o)
  );
endmodule

module CsaTree_5(	// src/main/scala/pvu/CsaTree.scala:7:7
  input  [7:0][59:0] io_operands_i,	// src/main/scala/pvu/CsaTree.scala:10:14
  output [62:0]      io_sum_o,	// src/main/scala/pvu/CsaTree.scala:10:14
                     io_carry_o	// src/main/scala/pvu/CsaTree.scala:10:14
);

  wire [61:0] _csa_tree_B_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [61:0] _csa_tree_B_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [61:0] _csa_tree_A_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  wire [61:0] _csa_tree_A_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  CsaTree_1 csa_tree_A (	// src/main/scala/pvu/CsaTree.scala:50:28
    .io_operands_i (io_operands_i[3'h0 +: 4]),	// src/main/scala/pvu/CsaTree.scala:50:28, :51:30
    .io_sum_o      (_csa_tree_A_io_sum_o),
    .io_carry_o    (_csa_tree_A_io_carry_o)
  );
  CsaTree_1 csa_tree_B (	// src/main/scala/pvu/CsaTree.scala:53:28
    .io_operands_i (io_operands_i[3'h4 +: 4]),	// src/main/scala/pvu/CsaTree.scala:53:28, :54:30
    .io_sum_o      (_csa_tree_B_io_sum_o),
    .io_carry_o    (_csa_tree_B_io_carry_o)
  );
  Compressor4to2_1 compressor (	// src/main/scala/pvu/CsaTree.scala:66:28
    .io_operands_i
      ({{{1'h0, _csa_tree_B_io_carry_o}},
        {{1'h0, _csa_tree_B_io_sum_o}},
        {{1'h0, _csa_tree_A_io_carry_o}},
        {{1'h0, _csa_tree_A_io_sum_o}}}),	// src/main/scala/pvu/CsaTree.scala:50:28, :53:28, :57:28, :58:18
    .io_sum_o      (io_sum_o),
    .io_carry_o    (io_carry_o)
  );
endmodule

module Compressor4to2_5(	// src/main/scala/pvu/Compressor4to2.scala:7:7
  input  [3:0][63:0] io_operands_i,	// src/main/scala/pvu/Compressor4to2.scala:8:14
  output [63:0]      io_sum_o,	// src/main/scala/pvu/Compressor4to2.scala:8:14
                     io_carry_o	// src/main/scala/pvu/Compressor4to2.scala:8:14
);

  assign io_sum_o =
    io_operands_i[2'h0] ^ io_operands_i[2'h1] ^ io_operands_i[2'h2] ^ io_operands_i[2'h3];	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36
  assign io_carry_o =
    io_operands_i[2'h0] & io_operands_i[2'h1] | io_operands_i[2'h1] & io_operands_i[2'h2]
    | io_operands_i[2'h2] & io_operands_i[2'h3] | io_operands_i[2'h0]
    & io_operands_i[2'h2] | io_operands_i[2'h0] & io_operands_i[2'h3]
    | io_operands_i[2'h1] & io_operands_i[2'h3];	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36, :16:33, :17:33, :18:33, :19:33, :20:{33,53}, :21:33
endmodule

module CsaTree_6(	// src/main/scala/pvu/CsaTree.scala:7:7
  input  [14:0][59:0] io_operands_i,	// src/main/scala/pvu/CsaTree.scala:10:14
  output [63:0]       io_sum_o,	// src/main/scala/pvu/CsaTree.scala:10:14
                      io_carry_o	// src/main/scala/pvu/CsaTree.scala:10:14
);

  wire [62:0] _csa_tree_B_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [62:0] _csa_tree_B_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [62:0] _csa_tree_A_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  wire [62:0] _csa_tree_A_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  CsaTree_2 csa_tree_A (	// src/main/scala/pvu/CsaTree.scala:50:28
    .io_operands_i (io_operands_i[4'h0 +: 7]),	// src/main/scala/pvu/CsaTree.scala:50:28, :51:30
    .io_sum_o      (_csa_tree_A_io_sum_o),
    .io_carry_o    (_csa_tree_A_io_carry_o)
  );
  CsaTree_5 csa_tree_B (	// src/main/scala/pvu/CsaTree.scala:53:28
    .io_operands_i (io_operands_i[4'h7 +: 8]),	// src/main/scala/pvu/CsaTree.scala:53:28, :54:30
    .io_sum_o      (_csa_tree_B_io_sum_o),
    .io_carry_o    (_csa_tree_B_io_carry_o)
  );
  Compressor4to2_5 compressor (	// src/main/scala/pvu/CsaTree.scala:66:28
    .io_operands_i
      ({{{1'h0, _csa_tree_B_io_carry_o}},
        {{1'h0, _csa_tree_B_io_sum_o}},
        {{1'h0, _csa_tree_A_io_carry_o}},
        {{1'h0, _csa_tree_A_io_sum_o}}}),	// src/main/scala/pvu/CsaTree.scala:50:28, :53:28, :57:28, :58:18
    .io_sum_o      (io_sum_o),
    .io_carry_o    (io_carry_o)
  );
endmodule

module Radix4BoothMultiplier(	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:7:7
  input         clock,	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:7:7
                reset,	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:7:7
  input  [29:0] io_operand_a,	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:12:14
                io_operand_b,	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:12:14
  output [59:0] io_sum_o,	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:12:14
                io_carry_o	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:12:14
);

  wire [63:0]       _csaTree_io_sum_o;	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:25:23
  wire [63:0]       _csaTree_io_carry_o;	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:25:23
  wire [14:0][59:0] _genProds_io_partial_prods;	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:20:24
  GenProds genProds (	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:20:24
    .clock            (clock),
    .reset            (reset),
    .io_operand_a     (io_operand_a),
    .io_operand_b     (io_operand_b),
    .io_partial_prods (_genProds_io_partial_prods)
  );
  CsaTree_6 csaTree (	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:25:23
    .io_operands_i (_genProds_io_partial_prods),	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:20:24
    .io_sum_o      (_csaTree_io_sum_o),
    .io_carry_o    (_csaTree_io_carry_o)
  );
  assign io_sum_o = _csaTree_io_sum_o[59:0];	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:7:7, :25:23, :29:14
  assign io_carry_o = _csaTree_io_carry_o[59:0];	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:7:7, :25:23, :30:14
endmodule

module Mul(	// src/main/scala/pvu/Mul.scala:7:7
  input              clock,	// src/main/scala/pvu/Mul.scala:7:7
                     reset,	// src/main/scala/pvu/Mul.scala:7:7
  input  [0:0]       io_pir_sign1_i,	// src/main/scala/pvu/Mul.scala:14:14
                     io_pir_sign2_i,	// src/main/scala/pvu/Mul.scala:14:14
  input  [0:0][7:0]  io_pir_exp1_i,	// src/main/scala/pvu/Mul.scala:14:14
                     io_pir_exp2_i,	// src/main/scala/pvu/Mul.scala:14:14
  input  [0:0][29:0] io_pir_frac1_i,	// src/main/scala/pvu/Mul.scala:14:14
                     io_pir_frac2_i,	// src/main/scala/pvu/Mul.scala:14:14
  output [0:0]       io_pir_sign_o,	// src/main/scala/pvu/Mul.scala:14:14
  output [0:0][7:0]  io_pir_exp_o,	// src/main/scala/pvu/Mul.scala:14:14
  output [0:0][61:0] io_pir_frac_o	// src/main/scala/pvu/Mul.scala:14:14
);

  wire [59:0] _radix4BoothMultiplier_io_sum_o;	// src/main/scala/pvu/Mul.scala:38:39
  wire [59:0] _radix4BoothMultiplier_io_carry_o;	// src/main/scala/pvu/Mul.scala:38:39
  wire [8:0]  sum =
    {io_pir_exp1_i[1'h0][7], io_pir_exp1_i[1'h0]}
    + {io_pir_exp2_i[1'h0][7], io_pir_exp2_i[1'h0]};	// src/main/scala/pvu/Mul.scala:51:34
  wire        _GEN = /*cast(bit)*/io_pir_sign1_i;	// src/main/scala/pvu/Mul.scala:7:7
  wire        _GEN_0 = /*cast(bit)*/io_pir_sign2_i;	// src/main/scala/pvu/Mul.scala:7:7
  Radix4BoothMultiplier radix4BoothMultiplier (	// src/main/scala/pvu/Mul.scala:38:39
    .clock        (clock),
    .reset        (reset),
    .io_operand_a (io_pir_frac1_i[1'h0]),	// src/main/scala/pvu/Mul.scala:39:40, :51:34
    .io_operand_b (io_pir_frac2_i[1'h0]),	// src/main/scala/pvu/Mul.scala:40:40, :51:34
    .io_sum_o     (_radix4BoothMultiplier_io_sum_o),
    .io_carry_o   (_radix4BoothMultiplier_io_carry_o)
  );
  assign io_pir_sign_o = /*cast(bit[0:0])*/_GEN ^ _GEN_0;	// src/main/scala/pvu/Mul.scala:7:7
  assign io_pir_exp_o = {1{sum[8] ? 8'h7F : sum[7:0]}};	// src/main/scala/pvu/Mul.scala:7:7, :48:49, :51:34, :52:20, :54:{27,54}
  assign io_pir_frac_o =
    {1{sum[8]
         ? 62'h0
         : {2'h0, _radix4BoothMultiplier_io_sum_o}
           + {2'h0, _radix4BoothMultiplier_io_carry_o}}};	// src/main/scala/pvu/Mul.scala:7:7, :38:39, :43:55, :51:34, :52:20, :55:27
endmodule

module IntReciprocal(	// src/main/scala/pvu/IntReciprocal.scala:7:7
  input  [29:0] io_num_i,	// src/main/scala/pvu/IntReciprocal.scala:8:14
  output [59:0] io_reciprocal_o	// src/main/scala/pvu/IntReciprocal.scala:8:14
);

  wire [59:0] _GEN = {30'h0, io_num_i};	// src/main/scala/pvu/IntReciprocal.scala:17:23
  wire [59:0] x0 = 60'h40000000 / _GEN;	// src/main/scala/pvu/IntReciprocal.scala:17:23
  wire [89:0] x1_x_new_full = {30'h0, x0} * {30'h0, 60'h80000000 - _GEN * x0};	// src/main/scala/pvu/IntReciprocal.scala:17:23, :28:22, :35:20, :41:25
  wire [89:0] x2_x_new_full =
    {30'h0, x1_x_new_full[89:30]} * {30'h0, 60'h80000000 - _GEN * x1_x_new_full[89:30]};	// src/main/scala/pvu/IntReciprocal.scala:17:23, :28:22, :35:20, :41:25, :44:{29,43}
  wire [89:0] x3_x_new_full =
    {30'h0, x2_x_new_full[89:30]} * {30'h0, 60'h80000000 - _GEN * x2_x_new_full[89:30]};	// src/main/scala/pvu/IntReciprocal.scala:17:23, :28:22, :35:20, :41:25, :44:{29,43}
  assign io_reciprocal_o = x3_x_new_full[89:30];	// src/main/scala/pvu/IntReciprocal.scala:7:7, :41:25, :44:{29,43}
endmodule

module GenProduct_15(	// src/main/scala/pvu/GenProduct.scala:17:7
  input  [59:0] io_multiplicand,	// src/main/scala/pvu/GenProduct.scala:18:14
  input  [2:0]  io_code,	// src/main/scala/pvu/GenProduct.scala:18:14
  output [60:0] io_partial_prod,	// src/main/scala/pvu/GenProduct.scala:18:14
  output        io_sign	// src/main/scala/pvu/GenProduct.scala:18:14
);

  wire _boothEncoder_io_neg;	// src/main/scala/pvu/GenProduct.scala:27:28
  wire _boothEncoder_io_one;	// src/main/scala/pvu/GenProduct.scala:27:28
  wire _boothEncoder_io_two;	// src/main/scala/pvu/GenProduct.scala:27:28
  BoothEncoder boothEncoder (	// src/main/scala/pvu/GenProduct.scala:27:28
    .io_code (io_code),
    .io_neg  (_boothEncoder_io_neg),
    .io_zero (/* unused */),
    .io_one  (_boothEncoder_io_one),
    .io_two  (_boothEncoder_io_two)
  );
  assign io_partial_prod =
    {61{_boothEncoder_io_neg}}
    ^ (_boothEncoder_io_one
         ? {1'h0, io_multiplicand}
         : _boothEncoder_io_two ? {io_multiplicand, 1'h0} : 61'h0);	// src/main/scala/pvu/GenProduct.scala:17:7, :27:28, :34:30, :35:14, :36:37, :37:{14,33}, :39:14, :43:25
  assign io_sign = _boothEncoder_io_neg;	// src/main/scala/pvu/GenProduct.scala:17:7, :27:28
endmodule

module GenProds_1(	// src/main/scala/pvu/GenProds.scala:23:7
  input                clock,	// src/main/scala/pvu/GenProds.scala:23:7
                       reset,	// src/main/scala/pvu/GenProds.scala:23:7
  input  [59:0]        io_operand_a,	// src/main/scala/pvu/GenProds.scala:27:14
                       io_operand_b,	// src/main/scala/pvu/GenProds.scala:27:14
  output [29:0][119:0] io_partial_prods	// src/main/scala/pvu/GenProds.scala:27:14
);

  wire [60:0]  _genProdLast_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:90:27
  wire [60:0]  _genProd_27_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_27_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_26_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_26_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_25_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_25_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_24_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_24_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_23_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_23_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_22_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_22_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_21_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_21_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_20_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_20_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_19_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_19_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_18_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_18_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_17_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_17_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_16_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_16_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_15_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_15_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_14_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_14_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_13_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_13_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_12_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_12_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_11_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_11_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_10_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_10_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_9_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_9_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_8_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_8_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_7_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_7_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_6_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_6_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_5_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_5_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_4_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_4_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_3_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_3_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_2_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_2_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_1_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_1_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProd_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:66:25
  wire         _genProd_io_sign;	// src/main/scala/pvu/GenProds.scala:66:25
  wire [60:0]  _genProdFirst_io_partial_prod;	// src/main/scala/pvu/GenProds.scala:48:28
  wire         _genProdFirst_io_sign;	// src/main/scala/pvu/GenProds.scala:48:28
  wire [119:0] _io_partial_prods_0_T_1 =
    {56'h0,
     ~_genProdFirst_io_sign,
     {2{_genProdFirst_io_sign}},
     _genProdFirst_io_partial_prod};	// src/main/scala/pvu/GenProds.scala:48:28, :55:{29,66}
  `ifndef SYNTHESIS	// src/main/scala/pvu/GenProds.scala:38:9
    always @(posedge clock) begin	// src/main/scala/pvu/GenProds.scala:38:9
      if ((`PRINTF_COND_) & ~reset) begin	// src/main/scala/pvu/GenProds.scala:38:9, :63:11
        $fwrite(32'h80000002, "multiplier = %b\n", {io_operand_b, 1'h0});	// src/main/scala/pvu/GenProds.scala:37:24, :38:9
        $fwrite(32'h80000002, "signs[0] = %b\n", ~_genProdFirst_io_sign);	// src/main/scala/pvu/GenProds.scala:38:9, :48:28, :55:66, :56:9
        $fwrite(32'h80000002, "partial_prods[0] = %x\n", _io_partial_prods_0_T_1);	// src/main/scala/pvu/GenProds.scala:38:9, :55:29, :57:9
        $fwrite(32'h80000002, "codes[%d] = %b\n", 1'h1, io_operand_b[3:1]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 2'h2, io_operand_b[5:3]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 2'h3, io_operand_b[7:5]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 3'h4, io_operand_b[9:7]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 3'h5, io_operand_b[11:9]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 3'h6, io_operand_b[13:11]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 3'h7, io_operand_b[15:13]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'h8, io_operand_b[17:15]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'h9, io_operand_b[19:17]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'hA, io_operand_b[21:19]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'hB, io_operand_b[23:21]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'hC, io_operand_b[25:23]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'hD, io_operand_b[27:25]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'hE, io_operand_b[29:27]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 4'hF, io_operand_b[31:29]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 5'h10, io_operand_b[33:31]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 5'h11, io_operand_b[35:33]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 5'h12, io_operand_b[37:35]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 5'h13, io_operand_b[39:37]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 5'h14, io_operand_b[41:39]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 5'h15, io_operand_b[43:41]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 5'h16, io_operand_b[45:43]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 5'h17, io_operand_b[47:45]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 5'h18, io_operand_b[49:47]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 5'h19, io_operand_b[51:49]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 5'h1A, io_operand_b[53:51]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 5'h1B, io_operand_b[55:53]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
        $fwrite(32'h80000002, "codes[%d] = %b\n", 5'h1C, io_operand_b[57:55]);	// src/main/scala/pvu/GenProds.scala:38:9, :62:27, :63:11
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  GenProduct_15 genProdFirst (	// src/main/scala/pvu/GenProds.scala:48:28
    .io_multiplicand (io_operand_a),
    .io_code         ({io_operand_b[1:0], 1'h0}),	// src/main/scala/pvu/GenProds.scala:37:24, :45:25
    .io_partial_prod (_genProdFirst_io_partial_prod),
    .io_sign         (_genProdFirst_io_sign)
  );
  GenProduct_15 genProd (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[3:1]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_io_partial_prod),
    .io_sign         (_genProd_io_sign)
  );
  GenProduct_15 genProd_1 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[5:3]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_1_io_partial_prod),
    .io_sign         (_genProd_1_io_sign)
  );
  GenProduct_15 genProd_2 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[7:5]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_2_io_partial_prod),
    .io_sign         (_genProd_2_io_sign)
  );
  GenProduct_15 genProd_3 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[9:7]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_3_io_partial_prod),
    .io_sign         (_genProd_3_io_sign)
  );
  GenProduct_15 genProd_4 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[11:9]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_4_io_partial_prod),
    .io_sign         (_genProd_4_io_sign)
  );
  GenProduct_15 genProd_5 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[13:11]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_5_io_partial_prod),
    .io_sign         (_genProd_5_io_sign)
  );
  GenProduct_15 genProd_6 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[15:13]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_6_io_partial_prod),
    .io_sign         (_genProd_6_io_sign)
  );
  GenProduct_15 genProd_7 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[17:15]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_7_io_partial_prod),
    .io_sign         (_genProd_7_io_sign)
  );
  GenProduct_15 genProd_8 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[19:17]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_8_io_partial_prod),
    .io_sign         (_genProd_8_io_sign)
  );
  GenProduct_15 genProd_9 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[21:19]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_9_io_partial_prod),
    .io_sign         (_genProd_9_io_sign)
  );
  GenProduct_15 genProd_10 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[23:21]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_10_io_partial_prod),
    .io_sign         (_genProd_10_io_sign)
  );
  GenProduct_15 genProd_11 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[25:23]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_11_io_partial_prod),
    .io_sign         (_genProd_11_io_sign)
  );
  GenProduct_15 genProd_12 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[27:25]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_12_io_partial_prod),
    .io_sign         (_genProd_12_io_sign)
  );
  GenProduct_15 genProd_13 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[29:27]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_13_io_partial_prod),
    .io_sign         (_genProd_13_io_sign)
  );
  GenProduct_15 genProd_14 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[31:29]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_14_io_partial_prod),
    .io_sign         (_genProd_14_io_sign)
  );
  GenProduct_15 genProd_15 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[33:31]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_15_io_partial_prod),
    .io_sign         (_genProd_15_io_sign)
  );
  GenProduct_15 genProd_16 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[35:33]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_16_io_partial_prod),
    .io_sign         (_genProd_16_io_sign)
  );
  GenProduct_15 genProd_17 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[37:35]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_17_io_partial_prod),
    .io_sign         (_genProd_17_io_sign)
  );
  GenProduct_15 genProd_18 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[39:37]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_18_io_partial_prod),
    .io_sign         (_genProd_18_io_sign)
  );
  GenProduct_15 genProd_19 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[41:39]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_19_io_partial_prod),
    .io_sign         (_genProd_19_io_sign)
  );
  GenProduct_15 genProd_20 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[43:41]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_20_io_partial_prod),
    .io_sign         (_genProd_20_io_sign)
  );
  GenProduct_15 genProd_21 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[45:43]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_21_io_partial_prod),
    .io_sign         (_genProd_21_io_sign)
  );
  GenProduct_15 genProd_22 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[47:45]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_22_io_partial_prod),
    .io_sign         (_genProd_22_io_sign)
  );
  GenProduct_15 genProd_23 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[49:47]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_23_io_partial_prod),
    .io_sign         (_genProd_23_io_sign)
  );
  GenProduct_15 genProd_24 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[51:49]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_24_io_partial_prod),
    .io_sign         (_genProd_24_io_sign)
  );
  GenProduct_15 genProd_25 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[53:51]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_25_io_partial_prod),
    .io_sign         (_genProd_25_io_sign)
  );
  GenProduct_15 genProd_26 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[55:53]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_26_io_partial_prod),
    .io_sign         (_genProd_26_io_sign)
  );
  GenProduct_15 genProd_27 (	// src/main/scala/pvu/GenProds.scala:66:25
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[57:55]),	// src/main/scala/pvu/GenProds.scala:62:27
    .io_partial_prod (_genProd_27_io_partial_prod),
    .io_sign         (_genProd_27_io_sign)
  );
  GenProduct_15 genProdLast (	// src/main/scala/pvu/GenProds.scala:90:27
    .io_multiplicand (io_operand_a),
    .io_code         (io_operand_b[59:57]),	// src/main/scala/pvu/GenProds.scala:87:33
    .io_partial_prod (_genProdLast_io_partial_prod),
    .io_sign         (/* unused */)
  );
  assign io_partial_prods =
    {{{1'h0, _genProdLast_io_partial_prod, 1'h0, _genProd_27_io_sign, 56'h0}},
     {{2'h1,
       ~_genProd_27_io_sign,
       _genProd_27_io_partial_prod,
       1'h0,
       _genProd_26_io_sign,
       54'h0}},
     {{4'h1,
       ~_genProd_26_io_sign,
       _genProd_26_io_partial_prod,
       1'h0,
       _genProd_25_io_sign,
       52'h0}},
     {{6'h1,
       ~_genProd_25_io_sign,
       _genProd_25_io_partial_prod,
       1'h0,
       _genProd_24_io_sign,
       50'h0}},
     {{8'h1,
       ~_genProd_24_io_sign,
       _genProd_24_io_partial_prod,
       1'h0,
       _genProd_23_io_sign,
       48'h0}},
     {{10'h1,
       ~_genProd_23_io_sign,
       _genProd_23_io_partial_prod,
       1'h0,
       _genProd_22_io_sign,
       46'h0}},
     {{12'h1,
       ~_genProd_22_io_sign,
       _genProd_22_io_partial_prod,
       1'h0,
       _genProd_21_io_sign,
       44'h0}},
     {{14'h1,
       ~_genProd_21_io_sign,
       _genProd_21_io_partial_prod,
       1'h0,
       _genProd_20_io_sign,
       42'h0}},
     {{16'h1,
       ~_genProd_20_io_sign,
       _genProd_20_io_partial_prod,
       1'h0,
       _genProd_19_io_sign,
       40'h0}},
     {{18'h1,
       ~_genProd_19_io_sign,
       _genProd_19_io_partial_prod,
       1'h0,
       _genProd_18_io_sign,
       38'h0}},
     {{20'h1,
       ~_genProd_18_io_sign,
       _genProd_18_io_partial_prod,
       1'h0,
       _genProd_17_io_sign,
       36'h0}},
     {{22'h1,
       ~_genProd_17_io_sign,
       _genProd_17_io_partial_prod,
       1'h0,
       _genProd_16_io_sign,
       34'h0}},
     {{24'h1,
       ~_genProd_16_io_sign,
       _genProd_16_io_partial_prod,
       1'h0,
       _genProd_15_io_sign,
       32'h0}},
     {{26'h1,
       ~_genProd_15_io_sign,
       _genProd_15_io_partial_prod,
       1'h0,
       _genProd_14_io_sign,
       30'h0}},
     {{28'h1,
       ~_genProd_14_io_sign,
       _genProd_14_io_partial_prod,
       1'h0,
       _genProd_13_io_sign,
       28'h0}},
     {{30'h1,
       ~_genProd_13_io_sign,
       _genProd_13_io_partial_prod,
       1'h0,
       _genProd_12_io_sign,
       26'h0}},
     {{32'h1,
       ~_genProd_12_io_sign,
       _genProd_12_io_partial_prod,
       1'h0,
       _genProd_11_io_sign,
       24'h0}},
     {{34'h1,
       ~_genProd_11_io_sign,
       _genProd_11_io_partial_prod,
       1'h0,
       _genProd_10_io_sign,
       22'h0}},
     {{36'h1,
       ~_genProd_10_io_sign,
       _genProd_10_io_partial_prod,
       1'h0,
       _genProd_9_io_sign,
       20'h0}},
     {{38'h1,
       ~_genProd_9_io_sign,
       _genProd_9_io_partial_prod,
       1'h0,
       _genProd_8_io_sign,
       18'h0}},
     {{40'h1,
       ~_genProd_8_io_sign,
       _genProd_8_io_partial_prod,
       1'h0,
       _genProd_7_io_sign,
       16'h0}},
     {{42'h1,
       ~_genProd_7_io_sign,
       _genProd_7_io_partial_prod,
       1'h0,
       _genProd_6_io_sign,
       14'h0}},
     {{44'h1,
       ~_genProd_6_io_sign,
       _genProd_6_io_partial_prod,
       1'h0,
       _genProd_5_io_sign,
       12'h0}},
     {{46'h1,
       ~_genProd_5_io_sign,
       _genProd_5_io_partial_prod,
       1'h0,
       _genProd_4_io_sign,
       10'h0}},
     {{48'h1,
       ~_genProd_4_io_sign,
       _genProd_4_io_partial_prod,
       1'h0,
       _genProd_3_io_sign,
       8'h0}},
     {{50'h1,
       ~_genProd_3_io_sign,
       _genProd_3_io_partial_prod,
       1'h0,
       _genProd_2_io_sign,
       6'h0}},
     {{52'h1,
       ~_genProd_2_io_sign,
       _genProd_2_io_partial_prod,
       1'h0,
       _genProd_1_io_sign,
       4'h0}},
     {{54'h1,
       ~_genProd_1_io_sign,
       _genProd_1_io_partial_prod,
       1'h0,
       _genProd_io_sign,
       2'h0}},
     {{56'h1, ~_genProd_io_sign, _genProd_io_partial_prod, 1'h0, _genProdFirst_io_sign}},
     {_io_partial_prods_0_T_1}};	// src/main/scala/pvu/GenProds.scala:23:7, :37:24, :48:28, :55:{23,29}, :66:25, :75:27, :78:7, :83:{25,42}, :90:27, :104:31
endmodule

module Compressor3to2_1(	// src/main/scala/pvu/Compressor3to2.scala:7:7
  input  [2:0][119:0] io_operands_i,	// src/main/scala/pvu/Compressor3to2.scala:8:14
  output [121:0]      io_sum_o,	// src/main/scala/pvu/Compressor3to2.scala:8:14
                      io_carry_o	// src/main/scala/pvu/Compressor3to2.scala:8:14
);

  assign io_sum_o =
    {2'h0, io_operands_i[2'h0] ^ io_operands_i[2'h1] ^ io_operands_i[2'h2]};	// src/main/scala/pvu/Compressor3to2.scala:7:7, :15:36, :20:14
  assign io_carry_o =
    {2'h0,
     io_operands_i[2'h0] & io_operands_i[2'h1] | io_operands_i[2'h1] & io_operands_i[2'h2]
       | io_operands_i[2'h0] & io_operands_i[2'h2]};	// src/main/scala/pvu/Compressor3to2.scala:7:7, :15:36, :16:33, :17:{33,53}, :18:33, :21:14
endmodule

module CsaTree_7(	// src/main/scala/pvu/CsaTree.scala:7:7
  input  [2:0][119:0] io_operands_i,	// src/main/scala/pvu/CsaTree.scala:10:14
  output [121:0]      io_sum_o,	// src/main/scala/pvu/CsaTree.scala:10:14
                      io_carry_o	// src/main/scala/pvu/CsaTree.scala:10:14
);

  Compressor3to2_1 compressor (	// src/main/scala/pvu/CsaTree.scala:32:28
    .io_operands_i (io_operands_i),
    .io_sum_o      (io_sum_o),
    .io_carry_o    (io_carry_o)
  );
endmodule

module Compressor4to2_6(	// src/main/scala/pvu/Compressor4to2.scala:7:7
  input  [3:0][119:0] io_operands_i,	// src/main/scala/pvu/Compressor4to2.scala:8:14
  output [121:0]      io_sum_o,	// src/main/scala/pvu/Compressor4to2.scala:8:14
                      io_carry_o	// src/main/scala/pvu/Compressor4to2.scala:8:14
);

  assign io_sum_o =
    {2'h0,
     io_operands_i[2'h0] ^ io_operands_i[2'h1] ^ io_operands_i[2'h2]
       ^ io_operands_i[2'h3]};	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36, :23:12
  assign io_carry_o =
    {2'h0,
     io_operands_i[2'h0] & io_operands_i[2'h1] | io_operands_i[2'h1] & io_operands_i[2'h2]
       | io_operands_i[2'h2] & io_operands_i[2'h3] | io_operands_i[2'h0]
       & io_operands_i[2'h2] | io_operands_i[2'h0] & io_operands_i[2'h3]
       | io_operands_i[2'h1] & io_operands_i[2'h3]};	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36, :16:33, :17:33, :18:33, :19:33, :20:{33,53}, :21:33, :24:14
endmodule

module CsaTree_8(	// src/main/scala/pvu/CsaTree.scala:7:7
  input  [3:0][119:0] io_operands_i,	// src/main/scala/pvu/CsaTree.scala:10:14
  output [121:0]      io_sum_o,	// src/main/scala/pvu/CsaTree.scala:10:14
                      io_carry_o	// src/main/scala/pvu/CsaTree.scala:10:14
);

  Compressor4to2_6 compressor (	// src/main/scala/pvu/CsaTree.scala:39:28
    .io_operands_i (io_operands_i),
    .io_sum_o      (io_sum_o),
    .io_carry_o    (io_carry_o)
  );
endmodule

module Compressor4to2_7(	// src/main/scala/pvu/Compressor4to2.scala:7:7
  input  [3:0][122:0] io_operands_i,	// src/main/scala/pvu/Compressor4to2.scala:8:14
  output [122:0]      io_sum_o,	// src/main/scala/pvu/Compressor4to2.scala:8:14
                      io_carry_o	// src/main/scala/pvu/Compressor4to2.scala:8:14
);

  assign io_sum_o =
    io_operands_i[2'h0] ^ io_operands_i[2'h1] ^ io_operands_i[2'h2] ^ io_operands_i[2'h3];	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36
  assign io_carry_o =
    io_operands_i[2'h0] & io_operands_i[2'h1] | io_operands_i[2'h1] & io_operands_i[2'h2]
    | io_operands_i[2'h2] & io_operands_i[2'h3] | io_operands_i[2'h0]
    & io_operands_i[2'h2] | io_operands_i[2'h0] & io_operands_i[2'h3]
    | io_operands_i[2'h1] & io_operands_i[2'h3];	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36, :16:33, :17:33, :18:33, :19:33, :20:{33,53}, :21:33
endmodule

module CsaTree_9(	// src/main/scala/pvu/CsaTree.scala:7:7
  input  [6:0][119:0] io_operands_i,	// src/main/scala/pvu/CsaTree.scala:10:14
  output [122:0]      io_sum_o,	// src/main/scala/pvu/CsaTree.scala:10:14
                      io_carry_o	// src/main/scala/pvu/CsaTree.scala:10:14
);

  wire [121:0] _csa_tree_B_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [121:0] _csa_tree_B_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [121:0] _csa_tree_A_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  wire [121:0] _csa_tree_A_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  CsaTree_7 csa_tree_A (	// src/main/scala/pvu/CsaTree.scala:50:28
    .io_operands_i (io_operands_i[3'h0 +: 3]),	// src/main/scala/pvu/CsaTree.scala:50:28, :51:30
    .io_sum_o      (_csa_tree_A_io_sum_o),
    .io_carry_o    (_csa_tree_A_io_carry_o)
  );
  CsaTree_8 csa_tree_B (	// src/main/scala/pvu/CsaTree.scala:53:28
    .io_operands_i (io_operands_i[3'h3 +: 4]),	// src/main/scala/pvu/CsaTree.scala:53:28, :54:30
    .io_sum_o      (_csa_tree_B_io_sum_o),
    .io_carry_o    (_csa_tree_B_io_carry_o)
  );
  Compressor4to2_7 compressor (	// src/main/scala/pvu/CsaTree.scala:66:28
    .io_operands_i
      ({{{1'h0, _csa_tree_B_io_carry_o}},
        {{1'h0, _csa_tree_B_io_sum_o}},
        {{1'h0, _csa_tree_A_io_carry_o}},
        {{1'h0, _csa_tree_A_io_sum_o}}}),	// src/main/scala/pvu/CsaTree.scala:50:28, :53:28, :57:28, :58:18
    .io_sum_o      (io_sum_o),
    .io_carry_o    (io_carry_o)
  );
endmodule

module CsaTree_12(	// src/main/scala/pvu/CsaTree.scala:7:7
  input  [7:0][119:0] io_operands_i,	// src/main/scala/pvu/CsaTree.scala:10:14
  output [122:0]      io_sum_o,	// src/main/scala/pvu/CsaTree.scala:10:14
                      io_carry_o	// src/main/scala/pvu/CsaTree.scala:10:14
);

  wire [121:0] _csa_tree_B_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [121:0] _csa_tree_B_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [121:0] _csa_tree_A_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  wire [121:0] _csa_tree_A_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  CsaTree_8 csa_tree_A (	// src/main/scala/pvu/CsaTree.scala:50:28
    .io_operands_i (io_operands_i[3'h0 +: 4]),	// src/main/scala/pvu/CsaTree.scala:50:28, :51:30
    .io_sum_o      (_csa_tree_A_io_sum_o),
    .io_carry_o    (_csa_tree_A_io_carry_o)
  );
  CsaTree_8 csa_tree_B (	// src/main/scala/pvu/CsaTree.scala:53:28
    .io_operands_i (io_operands_i[3'h4 +: 4]),	// src/main/scala/pvu/CsaTree.scala:53:28, :54:30
    .io_sum_o      (_csa_tree_B_io_sum_o),
    .io_carry_o    (_csa_tree_B_io_carry_o)
  );
  Compressor4to2_7 compressor (	// src/main/scala/pvu/CsaTree.scala:66:28
    .io_operands_i
      ({{{1'h0, _csa_tree_B_io_carry_o}},
        {{1'h0, _csa_tree_B_io_sum_o}},
        {{1'h0, _csa_tree_A_io_carry_o}},
        {{1'h0, _csa_tree_A_io_sum_o}}}),	// src/main/scala/pvu/CsaTree.scala:50:28, :53:28, :57:28, :58:18
    .io_sum_o      (io_sum_o),
    .io_carry_o    (io_carry_o)
  );
endmodule

module Compressor4to2_11(	// src/main/scala/pvu/Compressor4to2.scala:7:7
  input  [3:0][123:0] io_operands_i,	// src/main/scala/pvu/Compressor4to2.scala:8:14
  output [123:0]      io_sum_o,	// src/main/scala/pvu/Compressor4to2.scala:8:14
                      io_carry_o	// src/main/scala/pvu/Compressor4to2.scala:8:14
);

  assign io_sum_o =
    io_operands_i[2'h0] ^ io_operands_i[2'h1] ^ io_operands_i[2'h2] ^ io_operands_i[2'h3];	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36
  assign io_carry_o =
    io_operands_i[2'h0] & io_operands_i[2'h1] | io_operands_i[2'h1] & io_operands_i[2'h2]
    | io_operands_i[2'h2] & io_operands_i[2'h3] | io_operands_i[2'h0]
    & io_operands_i[2'h2] | io_operands_i[2'h0] & io_operands_i[2'h3]
    | io_operands_i[2'h1] & io_operands_i[2'h3];	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36, :16:33, :17:33, :18:33, :19:33, :20:{33,53}, :21:33
endmodule

module CsaTree_13(	// src/main/scala/pvu/CsaTree.scala:7:7
  input  [14:0][119:0] io_operands_i,	// src/main/scala/pvu/CsaTree.scala:10:14
  output [123:0]       io_sum_o,	// src/main/scala/pvu/CsaTree.scala:10:14
                       io_carry_o	// src/main/scala/pvu/CsaTree.scala:10:14
);

  wire [122:0] _csa_tree_B_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [122:0] _csa_tree_B_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [122:0] _csa_tree_A_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  wire [122:0] _csa_tree_A_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  CsaTree_9 csa_tree_A (	// src/main/scala/pvu/CsaTree.scala:50:28
    .io_operands_i (io_operands_i[4'h0 +: 7]),	// src/main/scala/pvu/CsaTree.scala:50:28, :51:30
    .io_sum_o      (_csa_tree_A_io_sum_o),
    .io_carry_o    (_csa_tree_A_io_carry_o)
  );
  CsaTree_12 csa_tree_B (	// src/main/scala/pvu/CsaTree.scala:53:28
    .io_operands_i (io_operands_i[4'h7 +: 8]),	// src/main/scala/pvu/CsaTree.scala:53:28, :54:30
    .io_sum_o      (_csa_tree_B_io_sum_o),
    .io_carry_o    (_csa_tree_B_io_carry_o)
  );
  Compressor4to2_11 compressor (	// src/main/scala/pvu/CsaTree.scala:66:28
    .io_operands_i
      ({{{1'h0, _csa_tree_B_io_carry_o}},
        {{1'h0, _csa_tree_B_io_sum_o}},
        {{1'h0, _csa_tree_A_io_carry_o}},
        {{1'h0, _csa_tree_A_io_sum_o}}}),	// src/main/scala/pvu/CsaTree.scala:50:28, :53:28, :57:28, :58:18
    .io_sum_o      (io_sum_o),
    .io_carry_o    (io_carry_o)
  );
endmodule

module Compressor4to2_18(	// src/main/scala/pvu/Compressor4to2.scala:7:7
  input  [3:0][124:0] io_operands_i,	// src/main/scala/pvu/Compressor4to2.scala:8:14
  output [124:0]      io_sum_o,	// src/main/scala/pvu/Compressor4to2.scala:8:14
                      io_carry_o	// src/main/scala/pvu/Compressor4to2.scala:8:14
);

  assign io_sum_o =
    io_operands_i[2'h0] ^ io_operands_i[2'h1] ^ io_operands_i[2'h2] ^ io_operands_i[2'h3];	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36
  assign io_carry_o =
    io_operands_i[2'h0] & io_operands_i[2'h1] | io_operands_i[2'h1] & io_operands_i[2'h2]
    | io_operands_i[2'h2] & io_operands_i[2'h3] | io_operands_i[2'h0]
    & io_operands_i[2'h2] | io_operands_i[2'h0] & io_operands_i[2'h3]
    | io_operands_i[2'h1] & io_operands_i[2'h3];	// src/main/scala/pvu/Compressor4to2.scala:7:7, :15:36, :16:33, :17:33, :18:33, :19:33, :20:{33,53}, :21:33
endmodule

module CsaTree_21(	// src/main/scala/pvu/CsaTree.scala:7:7
  input  [29:0][119:0] io_operands_i,	// src/main/scala/pvu/CsaTree.scala:10:14
  output [124:0]       io_sum_o,	// src/main/scala/pvu/CsaTree.scala:10:14
                       io_carry_o	// src/main/scala/pvu/CsaTree.scala:10:14
);

  wire [123:0] _csa_tree_B_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [123:0] _csa_tree_B_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:53:28
  wire [123:0] _csa_tree_A_io_sum_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  wire [123:0] _csa_tree_A_io_carry_o;	// src/main/scala/pvu/CsaTree.scala:50:28
  CsaTree_13 csa_tree_A (	// src/main/scala/pvu/CsaTree.scala:50:28
    .io_operands_i (io_operands_i[5'h0 +: 15]),	// src/main/scala/pvu/CsaTree.scala:50:28, :51:30
    .io_sum_o      (_csa_tree_A_io_sum_o),
    .io_carry_o    (_csa_tree_A_io_carry_o)
  );
  CsaTree_13 csa_tree_B (	// src/main/scala/pvu/CsaTree.scala:53:28
    .io_operands_i (io_operands_i[5'hF +: 15]),	// src/main/scala/pvu/CsaTree.scala:53:28, :54:30
    .io_sum_o      (_csa_tree_B_io_sum_o),
    .io_carry_o    (_csa_tree_B_io_carry_o)
  );
  Compressor4to2_18 compressor (	// src/main/scala/pvu/CsaTree.scala:66:28
    .io_operands_i
      ({{{1'h0, _csa_tree_B_io_carry_o}},
        {{1'h0, _csa_tree_B_io_sum_o}},
        {{1'h0, _csa_tree_A_io_carry_o}},
        {{1'h0, _csa_tree_A_io_sum_o}}}),	// src/main/scala/pvu/CsaTree.scala:50:28, :53:28, :57:28, :58:18
    .io_sum_o      (io_sum_o),
    .io_carry_o    (io_carry_o)
  );
endmodule

module Radix4BoothMultiplier_1(	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:7:7
  input          clock,	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:7:7
                 reset,	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:7:7
  input  [59:0]  io_operand_a,	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:12:14
                 io_operand_b,	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:12:14
  output [119:0] io_sum_o,	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:12:14
                 io_carry_o	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:12:14
);

  wire [124:0]       _csaTree_io_sum_o;	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:25:23
  wire [124:0]       _csaTree_io_carry_o;	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:25:23
  wire [29:0][119:0] _genProds_io_partial_prods;	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:20:24
  GenProds_1 genProds (	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:20:24
    .clock            (clock),
    .reset            (reset),
    .io_operand_a     (io_operand_a),
    .io_operand_b     (io_operand_b),
    .io_partial_prods (_genProds_io_partial_prods)
  );
  CsaTree_21 csaTree (	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:25:23
    .io_operands_i (_genProds_io_partial_prods),	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:20:24
    .io_sum_o      (_csaTree_io_sum_o),
    .io_carry_o    (_csaTree_io_carry_o)
  );
  assign io_sum_o = _csaTree_io_sum_o[119:0];	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:7:7, :25:23, :29:14
  assign io_carry_o = _csaTree_io_carry_o[119:0];	// src/main/scala/pvu/Radix4_Booth_Multiplier.scala:7:7, :25:23, :30:14
endmodule

module IntDivider(	// src/main/scala/pvu/IntDivider.scala:9:7
  input         clock,	// src/main/scala/pvu/IntDivider.scala:9:7
                reset,	// src/main/scala/pvu/IntDivider.scala:9:7
  input  [29:0] io_dividend,	// src/main/scala/pvu/IntDivider.scala:10:14
                io_divisor,	// src/main/scala/pvu/IntDivider.scala:10:14
  output [59:0] io_quotient	// src/main/scala/pvu/IntDivider.scala:10:14
);

  wire [119:0] _boothMult_io_sum_o;	// src/main/scala/pvu/IntDivider.scala:26:25
  wire [119:0] _boothMult_io_carry_o;	// src/main/scala/pvu/IntDivider.scala:26:25
  wire [59:0]  _reciprocalMod_io_reciprocal_o;	// src/main/scala/pvu/IntDivider.scala:17:29
  wire [89:0]  _product_T = _boothMult_io_sum_o[89:0] + _boothMult_io_carry_o[89:0];	// src/main/scala/pvu/IntDivider.scala:26:25, :30:36
  IntReciprocal reciprocalMod (	// src/main/scala/pvu/IntDivider.scala:17:29
    .io_num_i        (io_divisor),
    .io_reciprocal_o (_reciprocalMod_io_reciprocal_o)
  );
  Radix4BoothMultiplier_1 boothMult (	// src/main/scala/pvu/IntDivider.scala:26:25
    .clock        (clock),
    .reset        (reset),
    .io_operand_a ({io_dividend, 30'h0}),	// src/main/scala/pvu/IntDivider.scala:22:37
    .io_operand_b (_reciprocalMod_io_reciprocal_o),	// src/main/scala/pvu/IntDivider.scala:17:29
    .io_sum_o     (_boothMult_io_sum_o),
    .io_carry_o   (_boothMult_io_carry_o)
  );
  assign io_quotient = _product_T[89:30];	// src/main/scala/pvu/IntDivider.scala:9:7, :30:36, :33:{27,41}
endmodule

module Div(	// src/main/scala/pvu/Div.scala:8:7
  input              clock,	// src/main/scala/pvu/Div.scala:8:7
                     reset,	// src/main/scala/pvu/Div.scala:8:7
  input  [0:0]       io_pir_sign1_i,	// src/main/scala/pvu/Div.scala:15:14
                     io_pir_sign2_i,	// src/main/scala/pvu/Div.scala:15:14
  input  [0:0][7:0]  io_pir_exp1_i,	// src/main/scala/pvu/Div.scala:15:14
                     io_pir_exp2_i,	// src/main/scala/pvu/Div.scala:15:14
  input  [0:0][29:0] io_pir_frac1_i,	// src/main/scala/pvu/Div.scala:15:14
                     io_pir_frac2_i,	// src/main/scala/pvu/Div.scala:15:14
  output [0:0]       io_pir_sign_o,	// src/main/scala/pvu/Div.scala:15:14
  output [0:0][7:0]  io_pir_exp_o,	// src/main/scala/pvu/Div.scala:15:14
  output [0:0][61:0] io_pir_frac_o	// src/main/scala/pvu/Div.scala:15:14
);

  wire [59:0] _intdivider_io_quotient;	// src/main/scala/pvu/Div.scala:32:41
  wire        _GEN = /*cast(bit)*/io_pir_sign1_i;	// src/main/scala/pvu/Div.scala:8:7
  wire        _GEN_0 = /*cast(bit)*/io_pir_sign2_i;	// src/main/scala/pvu/Div.scala:8:7
  IntDivider intdivider (	// src/main/scala/pvu/Div.scala:32:41
    .clock       (clock),
    .reset       (reset),
    .io_dividend (io_pir_frac1_i[1'h0]),	// src/main/scala/pvu/Div.scala:33:32, :37:52
    .io_divisor  (io_pir_frac2_i[1'h0]),	// src/main/scala/pvu/Div.scala:34:32, :37:52
    .io_quotient (_intdivider_io_quotient)
  );
  assign io_pir_sign_o = /*cast(bit[0:0])*/_GEN ^ _GEN_0;	// src/main/scala/pvu/Div.scala:8:7
  assign io_pir_exp_o = {1{io_pir_exp1_i[1'h0] - io_pir_exp2_i[1'h0]}};	// src/main/scala/pvu/Div.scala:8:7, :37:52
  assign io_pir_frac_o = {1{{2'h0, _intdivider_io_quotient}}};	// src/main/scala/pvu/Div.scala:8:7, :32:41, :35:32
endmodule

module CompTree(	// src/main/scala/pvu/CompTree.scala:13:7
  input  [0:0][7:0] io_operands_i,	// src/main/scala/pvu/CompTree.scala:14:14
  output [7:0]      io_result_o	// src/main/scala/pvu/CompTree.scala:14:14
);

  assign io_result_o = io_operands_i[1'h0];	// src/main/scala/pvu/CompTree.scala:13:7, :21:17
endmodule

module FractionAlignment_DotProduct(	// src/main/scala/pvu/FractionAlignment_DotProduct.scala:8:7
  input  [0:0][57:0] io_pir_frac_i,	// src/main/scala/pvu/FractionAlignment_DotProduct.scala:16:14
  input  [0:0][7:0]  io_pir_exp_i,	// src/main/scala/pvu/FractionAlignment_DotProduct.scala:16:14
  output [0:0][57:0] io_pir_frac_align,	// src/main/scala/pvu/FractionAlignment_DotProduct.scala:16:14
  output [7:0]       io_pir_max_exp	// src/main/scala/pvu/FractionAlignment_DotProduct.scala:16:14
);

  wire [7:0] _comptree_io_result_o;	// src/main/scala/pvu/FractionAlignment_DotProduct.scala:25:26
  wire [7:0] _shift_amount_T = _comptree_io_result_o - io_pir_exp_i[1'h0];	// src/main/scala/pvu/FractionAlignment_DotProduct.scala:25:26, :26:28, :43:{40,62}
  wire [7:0] shift_amount = $signed(_shift_amount_T) < 8'sh0 ? 8'h0 : _shift_amount_T;	// src/main/scala/pvu/FractionAlignment_DotProduct.scala:43:{40,62}
  CompTree comptree (	// src/main/scala/pvu/FractionAlignment_DotProduct.scala:25:26
    .io_operands_i (io_pir_exp_i),
    .io_result_o   (_comptree_io_result_o)
  );
  assign io_pir_frac_align =
    {1{{io_pir_frac_i[1'h0][55:0], 2'h0}
    >> ($signed(shift_amount) > 8'sh1E ? 8'h1E : shift_amount)}};	// src/main/scala/pvu/FractionAlignment_DotProduct.scala:8:7, :33:{25,45}, :43:62, :44:{45,51,65}
  assign io_pir_max_exp = _comptree_io_result_o;	// src/main/scala/pvu/FractionAlignment_DotProduct.scala:8:7, :25:26
endmodule

module CsaTree_29(	// src/main/scala/pvu/CsaTree.scala:7:7
  input  [0:0][61:0] io_operands_i,	// src/main/scala/pvu/CsaTree.scala:10:14
  output [61:0]      io_sum_o	// src/main/scala/pvu/CsaTree.scala:10:14
);

  assign io_sum_o = io_operands_i[1'h0];	// src/main/scala/pvu/CsaTree.scala:7:7, :22:14
endmodule

module DotProduct(	// src/main/scala/pvu/DotProduct.scala:7:7
  input              clock,	// src/main/scala/pvu/DotProduct.scala:7:7
                     reset,	// src/main/scala/pvu/DotProduct.scala:7:7
  input  [0:0]       io_pir_sign1_i,	// src/main/scala/pvu/DotProduct.scala:14:14
                     io_pir_sign2_i,	// src/main/scala/pvu/DotProduct.scala:14:14
  input  [0:0][7:0]  io_pir_exp1_i,	// src/main/scala/pvu/DotProduct.scala:14:14
                     io_pir_exp2_i,	// src/main/scala/pvu/DotProduct.scala:14:14
  input  [0:0][27:0] io_pir_frac1_i,	// src/main/scala/pvu/DotProduct.scala:14:14
                     io_pir_frac2_i,	// src/main/scala/pvu/DotProduct.scala:14:14
  output             io_pir_sign_o,	// src/main/scala/pvu/DotProduct.scala:14:14
  output [7:0]       io_pir_exp_o,	// src/main/scala/pvu/DotProduct.scala:14:14
  output [61:0]      io_pir_frac_o	// src/main/scala/pvu/DotProduct.scala:14:14
);

  wire [0:0]       _mul_io_pir_sign_o;	// src/main/scala/pvu/DotProduct.scala:32:19
  wire [0:0][7:0]  _mul_io_pir_exp_o;	// src/main/scala/pvu/DotProduct.scala:32:19
  wire [0:0][61:0] _mul_io_pir_frac_o;	// src/main/scala/pvu/DotProduct.scala:32:19
  reg  [0:0][61:0] pir_frac_cmp_tmp;	// src/main/scala/pvu/DotProduct.scala:55:31
  wire [61:0]      _pir_frac_cmp_0_T_1 = ~pir_frac_cmp_tmp[1'h0] + 62'h1;	// src/main/scala/pvu/DotProduct.scala:46:26, :55:31, :58:25, :60:{26,47}
  always @(posedge clock) begin	// src/main/scala/pvu/DotProduct.scala:7:7
    if (reset)	// src/main/scala/pvu/DotProduct.scala:7:7
      pir_frac_cmp_tmp <= '{62'h0};	// src/main/scala/pvu/DotProduct.scala:55:{31,39}
    else if (_mul_io_pir_sign_o[1'h0])	// src/main/scala/pvu/DotProduct.scala:32:19, :46:26, :59:27
      pir_frac_cmp_tmp[1'h0] <= _pir_frac_cmp_0_T_1;	// src/main/scala/pvu/DotProduct.scala:46:26, :55:31, :60:47
  end // always @(posedge)
  Mul mul (	// src/main/scala/pvu/DotProduct.scala:32:19
    .clock          (clock),
    .reset          (reset),
    .io_pir_sign1_i (io_pir_sign1_i),
    .io_pir_sign2_i (io_pir_sign2_i),
    .io_pir_exp1_i  (io_pir_exp1_i),
    .io_pir_exp2_i  (io_pir_exp2_i),
    .io_pir_frac1_i ({1{{2'h0, io_pir_frac1_i[1'h0]}}}),	// src/main/scala/pvu/DotProduct.scala:32:19, :37:22, :46:26
    .io_pir_frac2_i ({1{{2'h0, io_pir_frac2_i[1'h0]}}}),	// src/main/scala/pvu/DotProduct.scala:32:19, :37:22, :38:22, :46:26
    .io_pir_sign_o  (_mul_io_pir_sign_o),
    .io_pir_exp_o   (_mul_io_pir_exp_o),
    .io_pir_frac_o  (_mul_io_pir_frac_o)
  );
  FractionAlignment_DotProduct frac_compare (	// src/main/scala/pvu/DotProduct.scala:48:39
    .io_pir_frac_i     ({1{_mul_io_pir_frac_o[1'h0][57:0]}}),	// src/main/scala/pvu/DotProduct.scala:32:19, :46:26, :48:39, :50:30
    .io_pir_exp_i      (_mul_io_pir_exp_o),	// src/main/scala/pvu/DotProduct.scala:32:19
    .io_pir_frac_align (/* unused */),
    .io_pir_max_exp    (io_pir_exp_o)
  );
  CsaTree_29 csaTree (	// src/main/scala/pvu/DotProduct.scala:71:23
    .io_operands_i
      ({1{_mul_io_pir_sign_o[1'h0] ? _pir_frac_cmp_0_T_1 : pir_frac_cmp_tmp[1'h0]}}),	// src/main/scala/pvu/DotProduct.scala:32:19, :46:26, :55:31, :58:25, :59:{27,36}, :60:{23,47}, :62:23
    .io_sum_o      (io_pir_frac_o)
  );
  assign io_pir_sign_o = 1'h0;	// src/main/scala/pvu/DotProduct.scala:7:7, :46:26
endmodule

// external module LZC

module BarrelShifter_2(	// src/main/scala/pvu/BarrelShift.scala:13:7
  input  [61:0] io_operand_i,	// src/main/scala/pvu/BarrelShift.scala:14:14
  input  [5:0]  io_shift_amount,	// src/main/scala/pvu/BarrelShift.scala:14:14
  output [61:0] io_result_o	// src/main/scala/pvu/BarrelShift.scala:14:14
);

  wire [61:0] _temp_results_4_T_2 =
    io_shift_amount[5] ? {io_operand_i[29:0], 32'h0} : io_operand_i;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  wire [61:0] _temp_results_3_T_2 =
    io_shift_amount[4] ? {_temp_results_4_T_2[45:0], 16'h0} : _temp_results_4_T_2;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  wire [61:0] _temp_results_2_T_2 =
    io_shift_amount[3] ? {_temp_results_3_T_2[53:0], 8'h0} : _temp_results_3_T_2;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  wire [61:0] _temp_results_1_T_2 =
    io_shift_amount[2] ? {_temp_results_2_T_2[57:0], 4'h0} : _temp_results_2_T_2;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  wire [61:0] _temp_results_0_T_2 =
    io_shift_amount[1] ? {_temp_results_1_T_2[59:0], 2'h0} : _temp_results_1_T_2;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  assign io_result_o =
    io_shift_amount[0] ? {_temp_results_0_T_2[60:0], 1'h0} : _temp_results_0_T_2;	// src/main/scala/pvu/BarrelShift.scala:13:7, :32:33, :42:{23,39,60}
endmodule

module FracNorm_DotProduct(	// src/main/scala/pvu/FracNorm_DotProduct.scala:11:7
  input  [61:0] io_pir_frac_i,	// src/main/scala/pvu/FracNorm_DotProduct.scala:17:14
  output [8:0]  io_exp_adjust,	// src/main/scala/pvu/FracNorm_DotProduct.scala:17:14
  output [28:0] io_pir_frac_o	// src/main/scala/pvu/FracNorm_DotProduct.scala:17:14
);

  wire [61:0] _shifter_io_result_o;	// src/main/scala/pvu/FracNorm_DotProduct.scala:46:30
  wire [5:0]  _lzcMod_cnt_o;	// src/main/scala/pvu/FracNorm_DotProduct.scala:27:37
  wire        _lzcMod_empty_o;	// src/main/scala/pvu/FracNorm_DotProduct.scala:27:37
  wire [5:0]  _exp_adjust_reg_T_2 = 6'h1 - _lzcMod_cnt_o - 6'h1;	// src/main/scala/pvu/FracNorm_DotProduct.scala:27:37, :37:{42,63}
  wire [5:0]  _exp_adjust_reg_T_10 = 6'h0 - _lzcMod_cnt_o;	// src/main/scala/pvu/FracNorm_DotProduct.scala:27:37, :36:35, :39:25
  LZC #(
    .MODE(1),
    .WIDTH(61)
  ) lzcMod (	// src/main/scala/pvu/FracNorm_DotProduct.scala:27:37
    .in_i    (io_pir_frac_i[60:0]),	// src/main/scala/pvu/FracNorm_DotProduct.scala:28:28
    .cnt_o   (_lzcMod_cnt_o),
    .empty_o (_lzcMod_empty_o)
  );
  BarrelShifter_2 shifter (	// src/main/scala/pvu/FracNorm_DotProduct.scala:46:30
    .io_operand_i    (io_pir_frac_i),
    .io_shift_amount (_lzcMod_cnt_o),	// src/main/scala/pvu/FracNorm_DotProduct.scala:27:37
    .io_result_o     (_shifter_io_result_o)
  );
  assign io_exp_adjust =
    _lzcMod_empty_o
      ? 9'h0
      : _lzcMod_cnt_o == 6'h0
          ? {{3{_exp_adjust_reg_T_2[5]}}, _exp_adjust_reg_T_2}
          : {{3{_exp_adjust_reg_T_10[5]}}, _exp_adjust_reg_T_10};	// src/main/scala/pvu/FracNorm_DotProduct.scala:11:7, :27:37, :34:22, :35:22, :36:{35,61}, :37:{22,63}, :39:{22,25}
  assign io_pir_frac_o = {_shifter_io_result_o[61:34], |(_shifter_io_result_o[32:0])};	// src/main/scala/pvu/FracNorm_DotProduct.scala:11:7, :46:30, :53:37, :54:37, :55:{27,40}
endmodule

// external module LZC

module BarrelShifter_3(	// src/main/scala/pvu/BarrelShift.scala:13:7
  input  [29:0] io_operand_i,	// src/main/scala/pvu/BarrelShift.scala:14:14
  input  [4:0]  io_shift_amount,	// src/main/scala/pvu/BarrelShift.scala:14:14
  output [29:0] io_result_o	// src/main/scala/pvu/BarrelShift.scala:14:14
);

  wire [29:0] _temp_results_3_T_2 =
    io_shift_amount[4] ? {io_operand_i[13:0], 16'h0} : io_operand_i;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  wire [29:0] _temp_results_2_T_2 =
    io_shift_amount[3] ? {_temp_results_3_T_2[21:0], 8'h0} : _temp_results_3_T_2;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  wire [29:0] _temp_results_1_T_2 =
    io_shift_amount[2] ? {_temp_results_2_T_2[25:0], 4'h0} : _temp_results_2_T_2;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  wire [29:0] _temp_results_0_T_2 =
    io_shift_amount[1] ? {_temp_results_1_T_2[27:0], 2'h0} : _temp_results_1_T_2;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  assign io_result_o =
    io_shift_amount[0] ? {_temp_results_0_T_2[28:0], 1'h0} : _temp_results_0_T_2;	// src/main/scala/pvu/BarrelShift.scala:13:7, :32:33, :42:{23,39,60}
endmodule

module FracNorm(	// src/main/scala/pvu/FracNorm.scala:10:7
  input  [0:0][29:0] io_pir_frac_i,	// src/main/scala/pvu/FracNorm.scala:16:14
  output [0:0][7:0]  io_exp_adjust,	// src/main/scala/pvu/FracNorm.scala:16:14
  output [0:0][28:0] io_pir_frac_o	// src/main/scala/pvu/FracNorm.scala:16:14
);

  wire [29:0] _shifter_io_result_o;	// src/main/scala/pvu/FracNorm.scala:48:30
  wire [4:0]  _lzcMod_cnt_o;	// src/main/scala/pvu/FracNorm.scala:29:37
  wire        _lzcMod_empty_o;	// src/main/scala/pvu/FracNorm.scala:29:37
  wire [4:0]  _exp_adjust_reg_T_2 = 5'h1 - _lzcMod_cnt_o - 5'h1;	// src/main/scala/pvu/FracNorm.scala:29:37, :39:{42,63}
  wire [4:0]  _exp_adjust_reg_T_10 = 5'h0 - _lzcMod_cnt_o;	// src/main/scala/pvu/FracNorm.scala:29:37, :38:35, :41:25
  LZC #(
    .MODE(1),
    .WIDTH(30)
  ) lzcMod (	// src/main/scala/pvu/FracNorm.scala:29:37
    .in_i    (io_pir_frac_i[1'h0]),	// src/main/scala/pvu/FracNorm.scala:30:28, :37:22
    .cnt_o   (_lzcMod_cnt_o),
    .empty_o (_lzcMod_empty_o)
  );
  BarrelShifter_3 shifter (	// src/main/scala/pvu/FracNorm.scala:48:30
    .io_operand_i    (io_pir_frac_i[1'h0]),	// src/main/scala/pvu/FracNorm.scala:30:28, :37:22
    .io_shift_amount (_lzcMod_cnt_o),	// src/main/scala/pvu/FracNorm.scala:29:37
    .io_result_o     (_shifter_io_result_o)
  );
  assign io_exp_adjust =
    {1{(_lzcMod_empty_o
          ? 8'h0
          : _lzcMod_cnt_o == 5'h0
              ? {{3{_exp_adjust_reg_T_2[4]}}, _exp_adjust_reg_T_2}
              : {{3{_exp_adjust_reg_T_10[4]}}, _exp_adjust_reg_T_10}) + 8'h2}};	// src/main/scala/pvu/FracNorm.scala:10:7, :29:37, :36:22, :37:22, :38:{35,61}, :39:{22,63}, :41:{22,25}, :58:52
  assign io_pir_frac_o = {1{{_shifter_io_result_o[29:2], _shifter_io_result_o[0]}}};	// src/main/scala/pvu/FracNorm.scala:10:7, :48:30, :55:37, :57:{30,43}
endmodule

// external module LZC

module FracNorm_2(	// src/main/scala/pvu/FracNorm.scala:10:7
  input  [0:0][61:0] io_pir_frac_i,	// src/main/scala/pvu/FracNorm.scala:16:14
  output [0:0][8:0]  io_exp_adjust,	// src/main/scala/pvu/FracNorm.scala:16:14
  output [0:0][28:0] io_pir_frac_o	// src/main/scala/pvu/FracNorm.scala:16:14
);

  wire [61:0] _shifter_io_result_o;	// src/main/scala/pvu/FracNorm.scala:48:30
  wire [5:0]  _lzcMod_cnt_o;	// src/main/scala/pvu/FracNorm.scala:29:37
  wire        _lzcMod_empty_o;	// src/main/scala/pvu/FracNorm.scala:29:37
  wire [5:0]  _exp_adjust_reg_T_2 = 6'h1 - _lzcMod_cnt_o - 6'h1;	// src/main/scala/pvu/FracNorm.scala:29:37, :39:{42,63}
  wire [5:0]  _exp_adjust_reg_T_10 = 6'h0 - _lzcMod_cnt_o;	// src/main/scala/pvu/FracNorm.scala:29:37, :38:35, :41:25
  LZC #(
    .MODE(1),
    .WIDTH(62)
  ) lzcMod (	// src/main/scala/pvu/FracNorm.scala:29:37
    .in_i    (io_pir_frac_i[1'h0]),	// src/main/scala/pvu/FracNorm.scala:30:28, :37:22
    .cnt_o   (_lzcMod_cnt_o),
    .empty_o (_lzcMod_empty_o)
  );
  BarrelShifter_2 shifter (	// src/main/scala/pvu/FracNorm.scala:48:30
    .io_operand_i    (io_pir_frac_i[1'h0]),	// src/main/scala/pvu/FracNorm.scala:30:28, :37:22
    .io_shift_amount (_lzcMod_cnt_o),	// src/main/scala/pvu/FracNorm.scala:29:37
    .io_result_o     (_shifter_io_result_o)
  );
  assign io_exp_adjust =
    {1{(_lzcMod_empty_o
          ? 9'h0
          : _lzcMod_cnt_o == 6'h0
              ? {{3{_exp_adjust_reg_T_2[5]}}, _exp_adjust_reg_T_2}
              : {{3{_exp_adjust_reg_T_10[5]}}, _exp_adjust_reg_T_10}) + 9'h22}};	// src/main/scala/pvu/FracNorm.scala:10:7, :29:37, :36:22, :37:22, :38:{35,61}, :39:{22,63}, :41:{22,25}, :58:52
  assign io_pir_frac_o =
    {1{{_shifter_io_result_o[61:34], |(_shifter_io_result_o[32:0])}}};	// src/main/scala/pvu/FracNorm.scala:10:7, :48:30, :55:37, :56:37, :57:{30,43}
endmodule

module BarrelShifter_7(	// src/main/scala/pvu/BarrelShift.scala:13:7
  input  [91:0] io_operand_i,	// src/main/scala/pvu/BarrelShift.scala:14:14
  input  [4:0]  io_shift_amount,	// src/main/scala/pvu/BarrelShift.scala:14:14
  output [91:0] io_result_o	// src/main/scala/pvu/BarrelShift.scala:14:14
);

  wire [91:0] _temp_results_3_T_2 =
    io_shift_amount[4] ? {io_operand_i[75:0], 16'h0} : io_operand_i;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  wire [91:0] _temp_results_2_T_2 =
    io_shift_amount[3] ? {_temp_results_3_T_2[83:0], 8'h0} : _temp_results_3_T_2;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  wire [91:0] _temp_results_1_T_2 =
    io_shift_amount[2] ? {_temp_results_2_T_2[87:0], 4'h0} : _temp_results_2_T_2;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  wire [91:0] _temp_results_0_T_2 =
    io_shift_amount[1] ? {_temp_results_1_T_2[89:0], 2'h0} : _temp_results_1_T_2;	// src/main/scala/pvu/BarrelShift.scala:32:{33,49,70}
  assign io_result_o =
    io_shift_amount[0] ? {_temp_results_0_T_2[90:0], 1'h0} : _temp_results_0_T_2;	// src/main/scala/pvu/BarrelShift.scala:13:7, :32:33, :42:{23,39,60}
endmodule

module PositEncode_DotProduct(	// src/main/scala/pvu/PositEncode_DotProduct.scala:7:7
  input         io_pir_sign,	// src/main/scala/pvu/PositEncode_DotProduct.scala:13:14
  input  [7:0]  io_pir_exp,	// src/main/scala/pvu/PositEncode_DotProduct.scala:13:14
  input  [28:0] io_pir_frac,	// src/main/scala/pvu/PositEncode_DotProduct.scala:13:14
  output [31:0] io_posit	// src/main/scala/pvu/PositEncode_DotProduct.scala:13:14
);

  wire [91:0] _barrel_shifter_io_result_o;	// src/main/scala/pvu/PositEncode_DotProduct.scala:65:47
  wire [30:0] _value_after_round_T =
    _barrel_shifter_io_result_o[61:31]
    + {30'h0,
       _barrel_shifter_io_result_o[30]
         & ((|(_barrel_shifter_io_result_o[29:0])) | _barrel_shifter_io_result_o[31])};	// src/main/scala/pvu/PositEncode_DotProduct.scala:65:47, :76:42, :79:38, :80:{38,57}, :81:{38,52,72}, :82:47
  BarrelShifter_7 barrel_shifter (	// src/main/scala/pvu/PositEncode_DotProduct.scala:65:47
    .io_operand_i
      ({io_pir_exp[7] ? 31'h1 : 31'h7FFFFFFE, io_pir_exp[1:0], io_pir_frac[27:0], 31'h0}),	// src/main/scala/pvu/PositEncode_DotProduct.scala:29:29, :36:15, :38:23, :39:{16,46}, :49:55, :64:53
    .io_shift_amount
      ((io_pir_exp[7] ? ~(io_pir_exp[6:2]) + 5'h2 : io_pir_exp[6:2] + 5'h2) - 5'h1),	// src/main/scala/pvu/PositEncode_DotProduct.scala:28:{16,29}, :38:23, :44:{26,45,62,79}, :56:112
    .io_result_o     (_barrel_shifter_io_result_o)
  );
  assign io_posit =
    io_pir_frac[28]
      ? (io_pir_sign
           ? {1'h1, ~_value_after_round_T + 31'h1}
           : {1'h0, _value_after_round_T})
      : 32'h0;	// src/main/scala/pvu/PositEncode_DotProduct.scala:7:7, :23:31, :36:15, :82:47, :87:{18,43,49,68,79}, :88:18
endmodule

module BarrelShifter_8(	// src/main/scala/pvu/BarrelShift.scala:13:7
  input  [91:0] io_operand_i,	// src/main/scala/pvu/BarrelShift.scala:14:14
  input  [4:0]  io_shift_amount,	// src/main/scala/pvu/BarrelShift.scala:14:14
  output [91:0] io_result_o	// src/main/scala/pvu/BarrelShift.scala:14:14
);

  wire [91:0] _temp_results_3_T_2 =
    io_shift_amount[4] ? {16'h0, io_operand_i[91:16]} : io_operand_i;	// src/main/scala/pvu/BarrelShift.scala:35:{33,49,70}
  wire [91:0] _temp_results_2_T_2 =
    io_shift_amount[3] ? {8'h0, _temp_results_3_T_2[91:8]} : _temp_results_3_T_2;	// src/main/scala/pvu/BarrelShift.scala:35:{33,49,70}
  wire [91:0] _temp_results_1_T_2 =
    io_shift_amount[2] ? {4'h0, _temp_results_2_T_2[91:4]} : _temp_results_2_T_2;	// src/main/scala/pvu/BarrelShift.scala:35:{33,49,70}
  wire [91:0] _temp_results_0_T_2 =
    io_shift_amount[1] ? {2'h0, _temp_results_1_T_2[91:2]} : _temp_results_1_T_2;	// src/main/scala/pvu/BarrelShift.scala:35:{33,49,70}
  assign io_result_o =
    io_shift_amount[0] ? {1'h0, _temp_results_0_T_2[91:1]} : _temp_results_0_T_2;	// src/main/scala/pvu/BarrelShift.scala:13:7, :35:33, :45:{23,39,60}
endmodule

module PositEncode(	// src/main/scala/pvu/PositEncode.scala:7:7
  input  [0:0]       io_pir_sign,	// src/main/scala/pvu/PositEncode.scala:13:14
  input  [0:0][7:0]  io_pir_exp,	// src/main/scala/pvu/PositEncode.scala:13:14
  input  [0:0][28:0] io_pir_frac,	// src/main/scala/pvu/PositEncode.scala:13:14
  output [0:0][31:0] io_posit	// src/main/scala/pvu/PositEncode.scala:13:14
);

  wire [91:0] _barrel_shifter_io_result_o;	// src/main/scala/pvu/PositEncode.scala:84:32
  wire [30:0] _value_after_round_0_T =
    _barrel_shifter_io_result_o[61:31]
    + {30'h0,
       _barrel_shifter_io_result_o[30]
         & ((|(_barrel_shifter_io_result_o[29:0])) | _barrel_shifter_io_result_o[31])};	// src/main/scala/pvu/PositEncode.scala:84:32, :99:49, :102:41, :103:{41,60}, :104:{38,52,75}, :105:50
  BarrelShifter_8 barrel_shifter (	// src/main/scala/pvu/PositEncode.scala:84:32
    .io_operand_i
      ({io_pir_exp[1'h0][7] ? 31'h1 : 31'h7FFFFFFE,
        io_pir_exp[1'h0][1:0],
        io_pir_frac[1'h0][27:0],
        31'h0}),	// src/main/scala/pvu/PositEncode.scala:24:35, :31:33, :32:33, :42:19, :45:31, :46:{21,54}, :62:65, :83:45, :115:90
    .io_shift_amount
      ((io_pir_exp[1'h0][7]
          ? ~(io_pir_exp[1'h0][6:2]) + 5'h2
          : io_pir_exp[1'h0][6:2] + 5'h2) - 5'h1),	// src/main/scala/pvu/PositEncode.scala:31:{17,33}, :45:31, :53:{27,49,69,89}, :73:123, :115:90
    .io_result_o     (_barrel_shifter_io_result_o)
  );
  assign io_posit =
    {1{io_pir_frac[1'h0][28]
         ? (io_pir_sign[1'h0]
              ? {1'h1, ~_value_after_round_0_T + 31'h1}
              : {1'h0, _value_after_round_0_T})
         : 32'h0}};	// src/main/scala/pvu/PositEncode.scala:7:7, :24:35, :42:19, :105:50, :115:{23,39,51,57,79,90}, :116:23
endmodule

module PvuTop(	// src/main/scala/pvu/PvuTop.scala:16:8
  input         clock,	// src/main/scala/pvu/PvuTop.scala:16:8
                reset,	// src/main/scala/pvu/PvuTop.scala:16:8
  input  [31:0] io_posit_i1_0,	// src/main/scala/pvu/PvuTop.scala:23:15
                io_posit_i2_0,	// src/main/scala/pvu/PvuTop.scala:23:15
  input  [2:0]  io_op,	// src/main/scala/pvu/PvuTop.scala:23:15
  output [31:0] io_posit_o_0,	// src/main/scala/pvu/PvuTop.scala:23:15
                io_posit_dot_o	// src/main/scala/pvu/PvuTop.scala:23:15
);

  wire [0:0][31:0] _encode_io_posit;	// src/main/scala/pvu/PvuTop.scala:256:37
  wire [31:0]      _encode_dot_io_posit;	// src/main/scala/pvu/PvuTop.scala:249:41
  wire [0:0][8:0]  _frac_norm_div_io_exp_adjust;	// src/main/scala/pvu/PvuTop.scala:219:46
  wire [0:0][28:0] _frac_norm_div_io_pir_frac_o;	// src/main/scala/pvu/PvuTop.scala:219:46
  wire [0:0][8:0]  _frac_norm_mul_io_exp_adjust;	// src/main/scala/pvu/PvuTop.scala:214:46
  wire [0:0][28:0] _frac_norm_mul_io_pir_frac_o;	// src/main/scala/pvu/PvuTop.scala:214:46
  wire [0:0][7:0]  _frac_norm_sub_io_exp_adjust;	// src/main/scala/pvu/PvuTop.scala:209:46
  wire [0:0][28:0] _frac_norm_sub_io_pir_frac_o;	// src/main/scala/pvu/PvuTop.scala:209:46
  wire [0:0][7:0]  _frac_norm_add_io_exp_adjust;	// src/main/scala/pvu/PvuTop.scala:204:46
  wire [0:0][28:0] _frac_norm_add_io_pir_frac_o;	// src/main/scala/pvu/PvuTop.scala:204:46
  wire [8:0]       _frac_norm_dot_io_exp_adjust;	// src/main/scala/pvu/PvuTop.scala:198:44
  wire [28:0]      _frac_norm_dot_io_pir_frac_o;	// src/main/scala/pvu/PvuTop.scala:198:44
  wire             _dotproduct_io_pir_sign_o;	// src/main/scala/pvu/PvuTop.scala:166:27
  wire [61:0]      _dotproduct_io_pir_frac_o;	// src/main/scala/pvu/PvuTop.scala:166:27
  wire [0:0]       _div_io_pir_sign_o;	// src/main/scala/pvu/PvuTop.scala:152:21
  wire [0:0][7:0]  _div_io_pir_exp_o;	// src/main/scala/pvu/PvuTop.scala:152:21
  wire [0:0][61:0] _div_io_pir_frac_o;	// src/main/scala/pvu/PvuTop.scala:152:21
  wire [0:0]       _mul_io_pir_sign_o;	// src/main/scala/pvu/PvuTop.scala:138:21
  wire [0:0][7:0]  _mul_io_pir_exp_o;	// src/main/scala/pvu/PvuTop.scala:138:21
  wire [0:0][61:0] _mul_io_pir_frac_o;	// src/main/scala/pvu/PvuTop.scala:138:21
  wire [0:0]       _sub_io_pir_sign_o;	// src/main/scala/pvu/PvuTop.scala:116:27
  wire [0:0][7:0]  _sub_io_pir_exp_o;	// src/main/scala/pvu/PvuTop.scala:116:27
  wire [0:0][29:0] _sub_io_pir_frac_o;	// src/main/scala/pvu/PvuTop.scala:116:27
  wire [0:0][29:0] _fracalign_1_io_pir_frac1_align;	// src/main/scala/pvu/PvuTop.scala:115:27
  wire [0:0][29:0] _fracalign_1_io_pir_frac2_align;	// src/main/scala/pvu/PvuTop.scala:115:27
  wire [0:0]       _add_io_pir_sign_o;	// src/main/scala/pvu/PvuTop.scala:90:27
  wire [0:0][7:0]  _add_io_pir_exp_o;	// src/main/scala/pvu/PvuTop.scala:90:27
  wire [0:0][29:0] _add_io_pir_frac_o;	// src/main/scala/pvu/PvuTop.scala:90:27
  wire [0:0][29:0] _fracalign_io_pir_frac1_align;	// src/main/scala/pvu/PvuTop.scala:89:27
  wire [0:0][29:0] _fracalign_io_pir_frac2_align;	// src/main/scala/pvu/PvuTop.scala:89:27
  wire [0:0]       _decode2_io_Sign;	// src/main/scala/pvu/PvuTop.scala:43:23
  wire [0:0][7:0]  _decode2_io_Exp;	// src/main/scala/pvu/PvuTop.scala:43:23
  wire [0:0][27:0] _decode2_io_Frac;	// src/main/scala/pvu/PvuTop.scala:43:23
  wire [0:0]       _decode1_io_Sign;	// src/main/scala/pvu/PvuTop.scala:42:23
  wire [0:0][7:0]  _decode1_io_Exp;	// src/main/scala/pvu/PvuTop.scala:42:23
  wire [0:0][27:0] _decode1_io_Frac;	// src/main/scala/pvu/PvuTop.scala:42:23
  wire             _GEN = io_op == 3'h1;	// src/main/scala/pvu/PvuTop.scala:85:14
  wire             _GEN_0 = io_op == 3'h2;	// src/main/scala/pvu/PvuTop.scala:111:20
  wire             _GEN_1 = io_op == 3'h3;	// src/main/scala/pvu/PvuTop.scala:137:20
  wire             _GEN_2 = io_op == 3'h4;	// src/main/scala/pvu/PvuTop.scala:151:20
  wire             _GEN_3 = io_op == 3'h5;	// src/main/scala/pvu/PvuTop.scala:165:20
  wire             _GEN_4 = _GEN | _GEN_0 | _GEN_1 | _GEN_2;	// src/main/scala/pvu/PvuTop.scala:81:16, :85:{14,22}, :111:{20,28}, :137:{20,28}, :151:{20,28}, :165:28
  wire [7:0][61:0] _GEN_5 =
    {{62'h0},
     {62'h0},
     {62'h0},
     {{33'h0, _frac_norm_div_io_pir_frac_o[1'h0]}},
     {{33'h0, _frac_norm_mul_io_pir_frac_o[1'h0]}},
     {{33'h0, _frac_norm_sub_io_pir_frac_o[1'h0]}},
     {{33'h0, _frac_norm_add_io_pir_frac_o[1'h0]}},
     {62'h0}};	// src/main/scala/pvu/PvuTop.scala:72:25, :85:14, :111:20, :137:20, :151:20, :165:20, :194:{23,33}, :197:22, :200:35, :203:28, :204:46, :206:37, :208:28, :209:46, :211:37, :213:28, :214:46, :216:37, :218:28, :219:46, :221:37
  wire [7:0][7:0]  _GEN_6 =
    {{8'h0},
     {8'h0},
     {8'h0},
     {_frac_norm_div_io_exp_adjust[1'h0][7:0]},
     {_frac_norm_mul_io_exp_adjust[1'h0][7:0]},
     {_frac_norm_sub_io_exp_adjust[1'h0]},
     {_frac_norm_add_io_exp_adjust[1'h0]},
     {8'h0}};	// src/main/scala/pvu/PvuTop.scala:72:25, :85:14, :111:20, :137:20, :151:20, :165:20, :192:{23,33}, :197:22, :203:28, :204:46, :207:37, :208:28, :209:46, :212:37, :213:28, :214:46, :217:37, :218:28, :219:46, :222:37, :234:{28,38}
  wire [0:0][29:0] _GEN_7 = {1{{2'h0, _decode1_io_Frac[1'h0]}}};	// src/main/scala/pvu/PvuTop.scala:42:23, :72:25, :85:14, :93:30, :138:21, :144:24
  wire [0:0][29:0] _GEN_8 = {1{{2'h0, _decode2_io_Frac[1'h0]}}};	// src/main/scala/pvu/PvuTop.scala:43:23, :72:25, :85:14, :95:30, :138:21, :145:24
  PositDecode decode1 (	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_posit ({1{io_posit_i1_0}}),	// src/main/scala/pvu/PvuTop.scala:16:8
    .io_Sign  (_decode1_io_Sign),
    .io_Exp   (_decode1_io_Exp),
    .io_Frac  (_decode1_io_Frac)
  );
  PositDecode decode2 (	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_posit ({1{io_posit_i2_0}}),	// src/main/scala/pvu/PvuTop.scala:16:8
    .io_Sign  (_decode2_io_Sign),
    .io_Exp   (_decode2_io_Exp),
    .io_Frac  (_decode2_io_Frac)
  );
  FractionAlignment_AddSub fracalign (	// src/main/scala/pvu/PvuTop.scala:89:27
    .io_pir_frac1_i     (_decode1_io_Frac),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_frac2_i     (_decode2_io_Frac),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_exp1_i      (_decode1_io_Exp),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_exp2_i      (_decode2_io_Exp),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_frac1_align (_fracalign_io_pir_frac1_align),
    .io_pir_frac2_align (_fracalign_io_pir_frac2_align),
    .io_pir_max_exp     (/* unused */)
  );
  Add add (	// src/main/scala/pvu/PvuTop.scala:90:27
    .io_pir_sign1_i       (_decode1_io_Sign),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_sign2_i       (_decode2_io_Sign),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_exp1_i        (_decode1_io_Exp),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_exp2_i        (_decode2_io_Exp),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_frac1_aligned (_fracalign_io_pir_frac1_align),	// src/main/scala/pvu/PvuTop.scala:89:27
    .io_pir_frac2_aligned (_fracalign_io_pir_frac2_align),	// src/main/scala/pvu/PvuTop.scala:89:27
    .io_pir_sign_o        (_add_io_pir_sign_o),
    .io_pir_exp_o         (_add_io_pir_exp_o),
    .io_pir_frac_o        (_add_io_pir_frac_o),
    .io_overflow          (/* unused */),
    .io_frac_truncate     (/* unused */)
  );
  FractionAlignment_AddSub fracalign_1 (	// src/main/scala/pvu/PvuTop.scala:115:27
    .io_pir_frac1_i     (_decode1_io_Frac),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_frac2_i     (_decode2_io_Frac),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_exp1_i      (_decode1_io_Exp),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_exp2_i      (_decode2_io_Exp),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_frac1_align (_fracalign_1_io_pir_frac1_align),
    .io_pir_frac2_align (_fracalign_1_io_pir_frac2_align),
    .io_pir_max_exp     (/* unused */)
  );
  Sub sub (	// src/main/scala/pvu/PvuTop.scala:116:27
    .io_pir_sign1_i       (_decode1_io_Sign),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_sign2_i       (_decode2_io_Sign),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_exp1_i        (_decode1_io_Exp),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_exp2_i        (_decode2_io_Exp),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_frac1_aligned (_fracalign_1_io_pir_frac1_align),	// src/main/scala/pvu/PvuTop.scala:115:27
    .io_pir_frac2_aligned (_fracalign_1_io_pir_frac2_align),	// src/main/scala/pvu/PvuTop.scala:115:27
    .io_pir_sign_o        (_sub_io_pir_sign_o),
    .io_pir_exp_o         (_sub_io_pir_exp_o),
    .io_pir_frac_o        (_sub_io_pir_frac_o),
    .io_overflow          (/* unused */),
    .io_frac_truncate     (/* unused */)
  );
  Mul mul (	// src/main/scala/pvu/PvuTop.scala:138:21
    .clock          (clock),
    .reset          (reset),
    .io_pir_sign1_i (_decode1_io_Sign),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_sign2_i (_decode2_io_Sign),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_exp1_i  (_decode1_io_Exp),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_exp2_i  (_decode2_io_Exp),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_frac1_i (_GEN_7),	// src/main/scala/pvu/PvuTop.scala:138:21
    .io_pir_frac2_i (_GEN_8),	// src/main/scala/pvu/PvuTop.scala:138:21
    .io_pir_sign_o  (_mul_io_pir_sign_o),
    .io_pir_exp_o   (_mul_io_pir_exp_o),
    .io_pir_frac_o  (_mul_io_pir_frac_o)
  );
  Div div (	// src/main/scala/pvu/PvuTop.scala:152:21
    .clock          (clock),
    .reset          (reset),
    .io_pir_sign1_i (_decode1_io_Sign),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_sign2_i (_decode2_io_Sign),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_exp1_i  (_decode1_io_Exp),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_exp2_i  (_decode2_io_Exp),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_frac1_i (_GEN_7),	// src/main/scala/pvu/PvuTop.scala:138:21
    .io_pir_frac2_i (_GEN_8),	// src/main/scala/pvu/PvuTop.scala:138:21
    .io_pir_sign_o  (_div_io_pir_sign_o),
    .io_pir_exp_o   (_div_io_pir_exp_o),
    .io_pir_frac_o  (_div_io_pir_frac_o)
  );
  DotProduct dotproduct (	// src/main/scala/pvu/PvuTop.scala:166:27
    .clock          (clock),
    .reset          (reset),
    .io_pir_sign1_i (_decode1_io_Sign),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_sign2_i (_decode2_io_Sign),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_exp1_i  (_decode1_io_Exp),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_exp2_i  (_decode2_io_Exp),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_frac1_i (_decode1_io_Frac),	// src/main/scala/pvu/PvuTop.scala:42:23
    .io_pir_frac2_i (_decode2_io_Frac),	// src/main/scala/pvu/PvuTop.scala:43:23
    .io_pir_sign_o  (_dotproduct_io_pir_sign_o),
    .io_pir_exp_o   (/* unused */),
    .io_pir_frac_o  (_dotproduct_io_pir_frac_o)
  );
  FracNorm_DotProduct frac_norm_dot (	// src/main/scala/pvu/PvuTop.scala:198:44
    .io_pir_frac_i (_GEN_4 | ~_GEN_3 ? 62'h0 : _dotproduct_io_pir_frac_o),	// src/main/scala/pvu/PvuTop.scala:81:16, :83:16, :85:22, :111:28, :137:28, :151:28, :165:{20,28}, :166:27, :194:{23,33}
    .io_exp_adjust (_frac_norm_dot_io_exp_adjust),
    .io_pir_frac_o (_frac_norm_dot_io_pir_frac_o)
  );
  FracNorm frac_norm_add (	// src/main/scala/pvu/PvuTop.scala:204:46
    .io_pir_frac_i ({1{_GEN ? _add_io_pir_frac_o[1'h0] : 30'h0}}),	// src/main/scala/pvu/PvuTop.scala:59:30, :72:25, :74:25, :85:{14,22}, :90:27, :106:22
    .io_exp_adjust (_frac_norm_add_io_exp_adjust),
    .io_pir_frac_o (_frac_norm_add_io_pir_frac_o)
  );
  FracNorm frac_norm_sub (	// src/main/scala/pvu/PvuTop.scala:209:46
    .io_pir_frac_i ({1{_GEN | ~_GEN_0 ? 30'h0 : _sub_io_pir_frac_o[1'h0]}}),	// src/main/scala/pvu/PvuTop.scala:60:30, :72:25, :74:25, :75:25, :85:{14,22}, :111:{20,28}, :116:27, :132:22
    .io_exp_adjust (_frac_norm_sub_io_exp_adjust),
    .io_pir_frac_o (_frac_norm_sub_io_pir_frac_o)
  );
  FracNorm_2 frac_norm_mul (	// src/main/scala/pvu/PvuTop.scala:214:46
    .io_pir_frac_i ({1{_GEN | _GEN_0 | ~_GEN_1 ? 62'h0 : _mul_io_pir_frac_o[1'h0]}}),	// src/main/scala/pvu/PvuTop.scala:61:30, :72:25, :76:25, :85:{14,22}, :111:{20,28}, :137:{20,28}, :138:21, :149:22, :194:{23,33}
    .io_exp_adjust (_frac_norm_mul_io_exp_adjust),
    .io_pir_frac_o (_frac_norm_mul_io_pir_frac_o)
  );
  FracNorm_2 frac_norm_div (	// src/main/scala/pvu/PvuTop.scala:219:46
    .io_pir_frac_i
      ({1{_GEN | _GEN_0 | _GEN_1 | ~_GEN_2 ? 62'h0 : _div_io_pir_frac_o[1'h0]}}),	// src/main/scala/pvu/PvuTop.scala:62:30, :72:25, :77:25, :85:{14,22}, :111:{20,28}, :137:{20,28}, :151:{20,28}, :152:21, :163:22, :194:{23,33}
    .io_exp_adjust (_frac_norm_div_io_exp_adjust),
    .io_pir_frac_o (_frac_norm_div_io_pir_frac_o)
  );
  PositEncode_DotProduct encode_dot (	// src/main/scala/pvu/PvuTop.scala:249:41
    .io_pir_sign (~_GEN_4 & _GEN_3 & _dotproduct_io_pir_sign_o),	// src/main/scala/pvu/PvuTop.scala:81:16, :85:22, :111:28, :137:28, :151:28, :165:{20,28}, :166:27
    .io_pir_exp  (_GEN_3 ? _frac_norm_dot_io_exp_adjust[7:0] : 8'h0),	// src/main/scala/pvu/PvuTop.scala:165:20, :192:{23,33}, :198:44, :201:35, :234:{28,38}, :235:28, :237:22, :238:30
    .io_pir_frac (_GEN_3 ? _frac_norm_dot_io_pir_frac_o : 29'h0),	// src/main/scala/pvu/PvuTop.scala:165:20, :194:{23,33}, :195:23, :197:22, :198:44, :200:35
    .io_posit    (_encode_dot_io_posit)
  );
  PositEncode encode (	// src/main/scala/pvu/PvuTop.scala:256:37
    .io_pir_sign
      ({1{_GEN
            ? _add_io_pir_sign_o[1'h0]
            : _GEN_0
                ? _sub_io_pir_sign_o[1'h0]
                : _GEN_1
                    ? _mul_io_pir_sign_o[1'h0]
                    : _GEN_2 & _div_io_pir_sign_o[1'h0]}}),	// src/main/scala/pvu/PvuTop.scala:57:30, :72:25, :85:{14,22}, :90:27, :104:22, :111:{20,28}, :116:27, :130:22, :137:{20,28}, :138:21, :147:22, :151:{20,28}, :152:21, :161:22
    .io_pir_exp
      ({1{_GEN_3
            ? 8'h0
            : (_GEN
                 ? _add_io_pir_exp_o[1'h0]
                 : _GEN_0
                     ? _sub_io_pir_exp_o[1'h0]
                     : _GEN_1
                         ? _mul_io_pir_exp_o[1'h0]
                         : _GEN_2 ? _div_io_pir_exp_o[1'h0] : 8'h0) + _GEN_6[io_op]}}),	// src/main/scala/pvu/PvuTop.scala:72:25, :73:25, :85:{14,22}, :90:27, :105:22, :111:{20,28}, :116:27, :131:22, :137:{20,28}, :138:21, :148:22, :151:{20,28}, :152:21, :162:22, :165:20, :192:{23,33}, :197:22, :203:28, :207:37, :208:28, :212:37, :213:28, :217:37, :218:28, :222:37, :230:38, :234:{28,38}, :237:22, :241:{31,49}
    .io_pir_frac ({1{_GEN_5[io_op][28:0]}}),	// src/main/scala/pvu/PvuTop.scala:85:14, :111:20, :137:20, :151:20, :165:20, :194:23, :197:22, :203:28, :206:37, :208:28, :211:37, :213:28, :216:37, :218:28, :221:37, :256:37, :259:28
    .io_posit    (_encode_io_posit)
  );
  assign io_posit_o_0 = _GEN_3 ? 32'h0 : _encode_io_posit[1'h0];	// src/main/scala/pvu/PvuTop.scala:16:8, :72:25, :165:20, :248:22, :254:{32,42}, :256:37, :260:28
  assign io_posit_dot_o = _GEN_3 ? _encode_dot_io_posit : 32'h0;	// src/main/scala/pvu/PvuTop.scala:16:8, :165:20, :248:22, :249:41, :253:32, :254:{32,42}, :261:28
endmodule


// ----- 8< ----- FILE "./lzc.sv" ----- 8< -----

// Generated by CIRCT firtool-1.62.0
// Copyright 2016 ETH Zurich and University of Bologna.
// Copyright and related rights are licensed under the Solderpad Hardware
// License, Version 0.51 (the "License"); you may not use this file except in
// compliance with the License.  You may obtain a copy of the License at
// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
// or agreed to in writing, software, hardware and materials distributed under
// this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

/// cf_math_pkg: Constant Function Implementations of Mathematical Functions for HDL Elaboration
///
/// This package contains a collection of mathematical functions that are commonly used when defining
/// the value of constants in HDL code.  These functions are implemented as Verilog constants
/// functions.  Introduced in Verilog 2001 (IEEE Std 1364-2001), a constant function (§ 10.3.5) is a
/// function whose value can be evaluated at compile time or during elaboration.  A constant function
/// must be called with arguments that are constants.
package cf_math_pkg;

    /// Ceiled Division of Two Natural Numbers
    ///
    /// Returns the quotient of two natural numbers, rounded towards plus infinity.
    function automatic integer ceil_div (input longint dividend, input longint divisor);
        automatic longint remainder;

        // pragma translate_off
        `ifndef VERILATOR
        if (dividend < 0) begin
            $fatal(1, "Dividend %0d is not a natural number!", dividend);
        end

        if (divisor < 0) begin
            $fatal(1, "Divisor %0d is not a natural number!", divisor);
        end

        if (divisor == 0) begin
            $fatal(1, "Division by zero!");
        end
        `endif
        // pragma translate_on

        remainder = dividend;
        for (ceil_div = 0; remainder > 0; ceil_div++) begin
            remainder = remainder - divisor;
        end
    endfunction

    function automatic integer clog(input integer n);
        begin
            n = n-1;
            for(clog=0; n>0; clog=clog+1)
                n = n>>1;
        end
    endfunction
    /// Index width required to be able to represent up to `num_idx` indices as a binary
    /// encoded signal.
    /// Ensures that the minimum width if an index signal is `1`, regardless of parametrization.
    ///
    /// Sample usage in type definition:
    /// As parameter:
    ///   `parameter type idx_t = logic[cf_math_pkg::idx_width(NumIdx)-1:0]`
    /// As typedef:
    ///   `typedef logic [cf_math_pkg::idx_width(NumIdx)-1:0] idx_t`
    function automatic integer unsigned idx_width (input integer unsigned num_idx);
        return (num_idx > 32'd1) ? unsigned'(clog(num_idx)) : 32'd1;
    endfunction

endpackage

// Copyright (c) 2018 - 2019 ETH Zurich, University of Bologna
// All rights reserved.
//
// This code is under development and not yet released to the public.
// Until it is released, the code is under the copyright of ETH Zurich and
// the University of Bologna, and may contain confidential and/or unpublished
// work. Any reuse/redistribution is strictly forbidden without written
// permission from ETH Zurich.
//
// Bug fixes and contributions will eventually be released under the
// SolderPad open hardware license in the context of the PULP platform
// (http://www.pulp-platform.org), under the copyright of ETH Zurich and the
// University of Bologna.

/// A trailing zero counter / leading zero counter.
/// Set MODE to 0 for trailing zero counter => cnt_o is the number of trailing zeros (from the LSB)
/// Set MODE to 1 for leading zero counter  => cnt_o is the number of leading zeros  (from the MSB)
/// If the input does not contain a zero, `empty_o` is asserted. Additionally `cnt_o` contains
/// the maximum number of zeros - 1. For example:
///   in_i = 000_0000, empty_o = 1, cnt_o = 6 (mode = 0)
///   in_i = 000_0001, empty_o = 0, cnt_o = 0 (mode = 0)
///   in_i = 000_1000, empty_o = 0, cnt_o = 3 (mode = 0)
/// Furthermore, this unit contains a more efficient implementation for Verilator (simulation only).
/// This speeds up simulation significantly.
module LZC #(
  /// The width of the input vector.
  parameter int unsigned WIDTH = 2,
  /// Mode selection: 0 -> trailing zero, 1 -> leading zero
  parameter bit          MODE  = 1'b0,
  /// Dependent parameter. Do **not** change!
  ///
  /// Width of the output signal with the zero count.
  parameter int unsigned CNT_WIDTH = cf_math_pkg::idx_width(WIDTH)
) (
  /// Input vector to be counted.
  input  logic [WIDTH-1:0]     in_i,
  /// Count of the leading / trailing zeros.
  output logic [CNT_WIDTH-1:0] cnt_o,
  /// Counter is empty: Asserted if all bits in in_i are zero.
  output logic                 empty_o
);

  if (WIDTH == 1) begin : gen_degenerate_lzc

    assign cnt_o[0] = !in_i[0];
    assign empty_o = !in_i[0];

  end else begin : gen_lzc

    localparam int unsigned NumLevels = cf_math_pkg::clog(WIDTH);

    // pragma translate_off
    initial begin
      assert(WIDTH > 0) else $fatal(1, "input must be at least one bit wide");
    end
    // pragma translate_on

    logic [WIDTH-1:0][NumLevels-1:0] index_lut;
    logic [2**NumLevels-1:0] sel_nodes;
    logic [2**NumLevels-1:0][NumLevels-1:0] index_nodes;

    logic [WIDTH-1:0] in_tmp;

    // reverse vector if required
    always_comb begin : flip_vector
      for (int unsigned i = 0; i < WIDTH; i++) begin
        in_tmp[i] = (MODE) ? in_i[WIDTH-1-i] : in_i[i];
      end
    end

    for (genvar j = 0; unsigned'(j) < WIDTH; j++) begin : g_index_lut
      assign index_lut[j] = (NumLevels)'(unsigned'(j));
    end

    for (genvar level = 0; unsigned'(level) < NumLevels; level++) begin : g_levels
      if (unsigned'(level) == NumLevels - 1) begin : g_last_level
        for (genvar k = 0; k < 2 ** level; k++) begin : g_level
          // if two successive indices are still in the vector...
          if (unsigned'(k) * 2 < WIDTH - 1) begin : g_reduce
            assign sel_nodes[2 ** level - 1 + k] = in_tmp[k * 2] | in_tmp[k * 2 + 1];
            assign index_nodes[2 ** level - 1 + k] = (in_tmp[k * 2] == 1'b1)
              ? index_lut[k * 2] :
                index_lut[k * 2 + 1];
          end
          // if only the first index is still in the vector...
          if (unsigned'(k) * 2 == WIDTH - 1) begin : g_base
            assign sel_nodes[2 ** level - 1 + k] = in_tmp[k * 2];
            assign index_nodes[2 ** level - 1 + k] = index_lut[k * 2];
          end
          // if index is out of range
          if (unsigned'(k) * 2 > WIDTH - 1) begin : g_out_of_range
            assign sel_nodes[2 ** level - 1 + k] = 1'b0;
            assign index_nodes[2 ** level - 1 + k] = '0;
          end
        end
      end else begin : g_not_last_level
        for (genvar l = 0; l < 2 ** level; l++) begin : g_level
          assign sel_nodes[2 ** level - 1 + l] =
              sel_nodes[2 ** (level + 1) - 1 + l * 2] | sel_nodes[2 ** (level + 1) - 1 + l * 2 + 1];
          assign index_nodes[2 ** level - 1 + l] = (sel_nodes[2 ** (level + 1) - 1 + l * 2] == 1'b1)
            ? index_nodes[2 ** (level + 1) - 1 + l * 2] :
              index_nodes[2 ** (level + 1) - 1 + l * 2 + 1];
        end
      end
    end

    assign cnt_o = NumLevels > unsigned'(0) ? index_nodes[0] : {(cf_math_pkg::clog(WIDTH)) {1'b0}};
    assign empty_o = NumLevels > unsigned'(0) ? ~sel_nodes[0] : ~(|in_i);

  end : gen_lzc

endmodule : LZC

